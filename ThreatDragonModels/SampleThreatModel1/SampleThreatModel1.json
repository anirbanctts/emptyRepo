{
  "summary": {
    "title": "SampleThreatModel1",
    "owner": "Anirban Biswas",
    "description": "Testing threat model creation"
  },
  "detail": {
    "contributors": [],
    "diagrams": [
      {
        "title": "SampleThreatModel1",
        "thumbnail": "./public/content/images/thumbnail.jpg",
        "id": 0,
        "diagramJson": {
          "cells": [
            {
              "type": "tm.Process",
              "size": {
                "width": 100,
                "height": 100
              },
              "position": {
                "x": 50,
                "y": 50
              },
              "angle": 0,
              "id": "4ec4dd54-862b-4dd9-a6be-55c13fe95676",
              "z": 1,
              "hasOpenThreats": true,
              "threats": [
                {
                  "status": "Open",
                  "severity": "Medium",
                  "title": "sample threat title 1",
                  "type": "OWASP Top Ten 2017 Category A2 - Broken Authentication",
                  "subtype": "Unprotected Storage of Credentials",
                  "description": "sample desc",
                  "mitigation": "sample mitigation",
                  "subCategorySummary": "Storing a password in plaintext may result in a system compromise.",
                  "attackPatternType": "Inject Unexpected Items",
                  "attackPattern": "Code Inclusion",
                  "attackPatternSummary": "An adversary exploits a weakness on the target to force arbitrary code to be retrieved locally or from a remote location and executed. This differs from code injection in that code injection involves the direct inclusion of code while code inclusion involves the addition or replacement of a reference to a code file, which is subsequently loaded by the target and used as part of the code of some application."
                },
                {
                  "status": "Open",
                  "severity": "Medium",
                  "title": "Poison messages 2",
                  "type": "OWASP Top Ten 2017 Category A3 - Sensitive Data Exposure",
                  "subtype": "Inadequate Encryption Strength",
                  "subCategorySummary": "The software stores or transmits sensitive data using an encryption scheme that is theoretically sound, but is not strong enough for the level of protection required.",
                  "attackPatternType": "Employ Probabilistic Techniques",
                  "attackPattern": "Fuzzing",
                  "attackPatternSummary": [
                    "In this attack pattern, the adversary leverages fuzzing to try to identify weaknesses in the system. Fuzzing is a software security and functionality testing method that feeds randomly constructed input to the system and looks for an indication that a failure in response to that input has occurred. Fuzzing treats the system as a black box and is totally free from any preconceptions or assumptions about the system. Fuzzing can help an attacker discover certain assumptions made about user input in the system. Fuzzing gives an attacker a quick way of potentially uncovering some of these assumptions despite not necessarily knowing anything about the internals of the system. These assumptions can then be turned against the system by specially crafting user input that may allow an attacker to achieve his goals."
                  ],
                  "description": "aa2",
                  "mitigation": "ss"
                },
                {
                  "status": "Open",
                  "severity": "Medium",
                  "type": "OWASP Top Ten 2017 Category A2 - Broken Authentication",
                  "title": "ww3",
                  "subtype": "Session Fixation",
                  "subCategorySummary": "Authenticating a user, or otherwise establishing a new user session, without invalidating any existing session identifier gives an attacker the opportunity to steal authenticated sessions.",
                  "attackPatternType": "Manipulate Data Structures",
                  "attackPattern": "Pointer Manipulation",
                  "attackPatternSummary": [
                    "This attack pattern involves an adversary manipulating a pointer within a target application resulting in the application accessing an unintended memory location. This can result in the crashing of the application or, for certain pointer values, access to data that would not normally be possible or the execution of arbitrary code. Since pointers are simply integer variables, Integer Attacks may often be used in Pointer Attacks."
                  ],
                  "description": "wwq1",
                  "mitigation": ""
                }
              ],
              "attrs": {
                ".element-shape": {
                  "class": "element-shape hasOpenThreats isInScope"
                },
                "text": {
                  "text": "process 0"
                },
                ".element-text": {
                  "class": "element-text hasOpenThreats isInScope"
                }
              }
            },
            {
              "type": "tm.Store",
              "size": {
                "width": 160,
                "height": 80
              },
              "position": {
                "x": 333,
                "y": 33
              },
              "angle": 0,
              "id": "82e63bf7-b784-4f96-973a-3e307a2a4284",
              "z": 2,
              "hasOpenThreats": true,
              "threats": [
                {
                  "status": "Open",
                  "severity": "Medium",
                  "title": "sample121",
                  "type": "OWASP Top Ten 2017 Category A2 - Broken Authentication",
                  "subtype": "Insufficiently Protected Credentials",
                  "subCategorySummary": "This weakness occurs when the application transmits or stores authentication credentials and uses an insecure method that is susceptible to unauthorized interception and/or retrieval.",
                  "attackPatternType": "Engage in Deceptive Interactions",
                  "attackPattern": "Action Spoofing",
                  "attackPatternSummary": [
                    "An adversary is able to disguise one action for another and therefore trick a user into initiating one type of action when they intend to initiate a different action. For example, a user might be led to believe that clicking a button will submit a query, but in fact it downloads software. Adversaries may perform this attack through social means, such as by simply convincing a victim to perform the action or relying on a user's natural inclination to do so, or through technical means, such as a clickjacking attack where a user sees one interface but is actually interacting with a second, invisible, interface."
                  ],
                  "description": "safs",
                  "mitigation": "dsf"
                }
              ],
              "attrs": {
                ".element-shape": {
                  "class": "element-shape hasOpenThreats isInScope"
                },
                "text": {
                  "text": "store 1"
                },
                ".element-text": {
                  "class": "element-text hasOpenThreats isInScope"
                }
              }
            },
            {
              "type": "tm.Actor",
              "size": {
                "width": 160,
                "height": 80
              },
              "position": {
                "x": 23,
                "y": 206
              },
              "angle": 0,
              "id": "8fec6dfa-15e9-4e4f-974e-8ef7e2201672",
              "z": 3,
              "hasOpenThreats": false,
              "attrs": {
                ".element-shape": {
                  "class": "element-shape hasNoOpenThreats isInScope"
                },
                "text": {
                  "text": "actor 2"
                },
                ".element-text": {
                  "class": "element-text hasNoOpenThreats isInScope"
                }
              }
            },
            {
              "type": "tm.Actor",
              "size": {
                "width": 160,
                "height": 80
              },
              "position": {
                "x": 396,
                "y": 215
              },
              "angle": 0,
              "id": "9ccd81b1-7ebc-4c50-bf5d-f2b57473c88d",
              "z": 4,
              "hasOpenThreats": false,
              "attrs": {
                ".element-shape": {
                  "class": "element-shape hasNoOpenThreats isInScope"
                },
                "text": {
                  "text": "actor 3"
                },
                ".element-text": {
                  "class": "element-text hasNoOpenThreats isInScope"
                }
              }
            }
          ]
        },
        "size": {
          "height": 590,
          "width": 790
        }
      }
    ]
  }
}