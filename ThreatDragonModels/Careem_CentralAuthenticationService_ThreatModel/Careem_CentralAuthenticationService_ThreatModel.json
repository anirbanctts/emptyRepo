{
  "summary": {
    "title": "Careem_CentralAuthenticationService_ThreatModel",
    "owner": "Anirban",
    "description": "sample desc"
  },
  "detail": {
    "contributors": [],
    "diagrams": [
      {
        "title": "web-based-login_IssueToken",
        "thumbnail": "./public/content/images/thumbnail.jpg",
        "id": 0,
        "diagramJson": {
          "cells": [
            {
              "type": "tm.Process",
              "size": {
                "width": 100,
                "height": 100
              },
              "position": {
                "x": 98,
                "y": 196
              },
              "angle": 0,
              "id": "bb4de7b9-ffe5-4774-bc73-0591a6935f81",
              "z": 1,
              "hasOpenThreats": true,
              "threats": [
                {
                  "status": "Open",
                  "severity": "Medium",
                  "type": "OWASP Top Ten 2017 Category A3 - Sensitive Data Exposure",
                  "subtype": "312 - Cleartext Storage of Sensitive Information",
                  "subCategorySummary": "The application stores sensitive information in cleartext within a resource that might be accessible to another control sphere.",
                  "vulnerabilityRating": "6.8",
                  "description": "This applies for all client types. For open source projects, secrets\n can be extracted directly from source code in their public\n repositories. Secrets can be extracted from application binaries\n just as easily when the published source is not available to the\n attacker. Even if an application takes significant measures to\n obfuscate secrets in their application distribution, one should\n consider that the secret can still be reverse-engineered by anyone\n with access to a complete functioning application bundle or binary.",
                  "title": "Obtaining client secret from source code or Binary",
                  "mitigation": "Countermeasures:\n o Don’t issue secrets to public clients or clients with\n inappropriate security policy (Section 5.2.3.1).\n o Require user consent for public clients (Section 5.2.3.2).\n o Use deployment-specific client secrets (Section 5.2.3.4).\n o Revoke client secrets (Section 5.2.3.6).",
                  "attackPatternType": "Collect and Analyze Information",
                  "attackPattern": "188 - Reverse Engineering",
                  "attackPatternSummary": [
                    "An adversary discovers the structure, function, and composition of an object, resource, or system by using a variety of analysis techniques to effectively determine how the analyzed entity was constructed or operates. The goal of reverse engineering is often to duplicate the function, or a part of the function, of an object in order to duplicate or \"back engineer\" some aspect of its functioning. Reverse engineering techniques can be applied to mechanical objects, electronic devices, or software, although the methodology and techniques involved in each type of analysis differ widely."
                  ],
                  "deinitionSource": "owasp"
                },
                {
                  "status": "Open",
                  "severity": "Medium",
                  "deinitionSource": "other",
                  "title": "Obtain a Deployment-Specific Secret",
                  "type": "An attacker may try to obtain the secret from a client installation.",
                  "vulnerabilityRating": "6.8",
                  "description": "An attacker may try to obtain the secret from a client installation,\neither from a web site (web server) or a particular device (native\napplication)",
                  "mitigation": "Plan--------\n1. Web server: Apply standard web server protection measures (for\nconfig files and databases)\n2. Native applications: Store secrets in secure local storage\n3. Revoke client secrets",
                  "attackPatternType": "Collect and Analyze Information",
                  "attackPattern": "116 - Excavation",
                  "attackPatternSummary": [
                    "An adversary actively probes the target in a manner that is designed to solicit information that could be leveraged for malicious purposes. This is achieved by exploring the target via ordinary interactions for the purpose of gathering intelligence about the target, or by sending data that is syntactically invalid or non-standard in an attempt to produce a response that contains the desired data. As a result of these interactions, the adversary is able to obtain information from the target that aids the attacker in making inferences about its security, configuration, or potential vulnerabilities. Examplar exchanges with the target may trigger unhandled exceptions or verbose error messages that reveal information like stack traces, configuration information, path information, or database design. This type of attack also includes the manipulation of query strings in a URI to produce invalid SQL queries, or by trying alternative path values in the hope that the server will return useful information."
                  ]
                },
                {
                  "status": "Open",
                  "severity": "High",
                  "deinitionSource": "owasp",
                  "title": "Obtain refresh token -  by weak authentication mechanism",
                  "type": "OWASP Top Ten 2017 Category A2 - Broken Authentication",
                  "subtype": "287 - Improper Authentication",
                  "subCategorySummary": "When an actor claims to have a given identity, the software does not prove or insufficiently proves that the claim is correct.",
                  "vulnerabilityRating": "8.6",
                  "description": "An attacker may obtain the refresh tokens issued to a web application\nby way of overcoming the web server’s security controls.\n\nSince a web application manages the user accounts of a\ncertain site, such an attack would result in an exposure of all\nrefresh tokens on that site to the attacker.",
                  "mitigation": "Use strong client authentication (e.g., client_assertion/\nclient_token) so the attacker cannot obtain the client secret\nrequired to exchange the tokens"
                },
                {
                  "status": "Open",
                  "severity": "Medium",
                  "deinitionSource": "owasp",
                  "title": "Obtain refresh token -  by lack of web server protection",
                  "type": "OWASP Top Ten 2017 Category A3 - Sensitive Data Exposure",
                  "subtype": "311 - Missing Encryption of Sensitive Data",
                  "subCategorySummary": "The software does not encrypt sensitive or critical information before storage or transmission.",
                  "attackPatternType": "Collect and Analyze Information",
                  "attackPattern": "116 - Excavation",
                  "attackPatternSummary": [
                    "An adversary actively probes the target in a manner that is designed to solicit information that could be leveraged for malicious purposes. This is achieved by exploring the target via ordinary interactions for the purpose of gathering intelligence about the target, or by sending data that is syntactically invalid or non-standard in an attempt to produce a response that contains the desired data. As a result of these interactions, the adversary is able to obtain information from the target that aids the attacker in making inferences about its security, configuration, or potential vulnerabilities. Examplar exchanges with the target may trigger unhandled exceptions or verbose error messages that reveal information like stack traces, configuration information, path information, or database design. This type of attack also includes the manipulation of query strings in a URI to produce invalid SQL queries, or by trying alternative path values in the hope that the server will return useful information."
                  ],
                  "vulnerabilityRating": "6.8",
                  "mitigation": "Use standard web server protection and configuration measures to\nprotect the integrity of the server, databases, configuration files,\nand other operational components of the server",
                  "description": "An attacker may obtain the refresh tokens issued to a web application\nby way of overcoming the web server’s security controls.\nImpact: Since a web application manages the user accounts of a\ncertain site, such an attack would result in an exposure of all\nrefresh tokens on that site to the attacker"
                },
                {
                  "status": "Open",
                  "severity": "Critical",
                  "deinitionSource": "cwe",
                  "title": "Obtaining Access Token from Client",
                  "type": "Limit Access",
                  "subtype": "201 - Information Exposure Through Sent Data",
                  "subCategorySummary": "The accidental exposure of sensitive information through sent data refers to the transmission of data which are either sensitive in and of itself or useful in the further exploitation of the system through standard data channels.",
                  "vulnerabilityRating": "9.5",
                  "description": "Access tokens could be stolen\nfrom the device if the application stores them in a storage device\nthat is accessible to other applications.\nImpact: Where the token is a bearer token and no additional mechanism\nis used to identify the client, the attacker can access all resources\nassociated with the token and its scope.",
                  "mitigation": "Countermeasures:\no Keep access tokens in transient memory and limit grants.\no Limit token scope.\no Keep access tokens in private memory or apply same protection\nmeans as for refresh tokens.\no Keep access token lifetime short."
                },
                {
                  "status": "Open",
                  "severity": "Medium",
                  "deinitionSource": "allcwe",
                  "mitigation": "Countermeasures:\no As per the core OAuth spec, the authorization server as well as\nthe client must ensure that these transmissions are protected\nusing transport-layer mechanisms such as TLS.\no The authorization server will require the client to authenticate\nwherever possible, so the binding of the authorization code to a\ncertain client can be validated in a reliable way.\no Use short expiry time for authorization codes.\no The authorization server should enforce a one-time usage\nrestriction\no If an authorization server observes multiple attempts to redeem an\nauthorization code, the authorization server may want to revoke\nall tokens granted based on the authorization code.\no In the absence of these countermeasures, reducing scope and expiry time for access\ntokens can be used to reduce the damage in case of leaks.\no The client server may reload the target page of the redirect URI\nin order to automatically clean up the browser cache.",
                  "description": "Authorization \"codes\" are passed via the browser, which may\nunintentionally leak those codes to untrusted web sites and attackers\nin different ways:\no Referrer headers: Browsers frequently pass a \"referer\" header when\na web page embeds content, or when a user travels from one web\npage to another web page. These referrer headers may be sent even\nwhen the origin site does not trust the destination site. The\nreferrer header is commonly logged for traffic analysis purposes.\no Request logs: Web server request logs commonly include query\nparameters on requests.\no Open redirectors: Web sites sometimes need to send users to\nanother destination via a redirector. Open redirectors pose a\nparticular risk to web-based delegation protocols because the\nredirector can leak verification codes to untrusted destination\nsites.\no Browser history: Web browsers commonly record visited URLs in the\nbrowser history. Another user of the same web browser may be able\nto view URLs that were visited by previous users.",
                  "vulnerabilityRating": "6.7",
                  "type": "All",
                  "subtype": "200 - Information Exposure",
                  "subCategorySummary": "An information exposure is the intentional or unintentional disclosure of information to an actor that is not explicitly authorized to have access to that information.",
                  "attackPattern": "472 - Browser Fingerprinting",
                  "attackPatternSummary": [
                    "An attacker carefully crafts small snippets of Java Script to efficiently detect the type of browser the potential victim is using. Many web-based attacks need prior knowledge of the web browser including the version of browser to ensure successful exploitation of a vulnerability. Having this knowledge allows an attacker to target the victim with attacks that specifically exploit known or zero day weaknesses in the type and version of the browser used by the victim. Automating this process via Java Script as a part of the same delivery system used to exploit the browser is considered more efficient as the attacker can supply a browser fingerprinting method and integrate it with exploit code, all contained in Java Script and in response to the same web page request by the browser."
                  ],
                  "title": "Authorization Code - Leaking Authorization codes"
                },
                {
                  "status": "Open",
                  "severity": "Medium",
                  "deinitionSource": "other",
                  "title": "Authorization Code - User Session Impersonation",
                  "type": "DNS or ARP spoofing",
                  "attackPattern": "598 - DNS Spoofing",
                  "attackPatternSummary": [
                    "An adversary sends a malicious (\"NXDOMAIN\" (\"No such domain\") code, or DNS A record) response to a targets route request before a legitimate resolver can. This technique requires an On-path or In-path device that can monitor and respond to the targets DNS requests. This attack differs from BGP Tampering in that it directly responds to requests made by the target instead of polluting the routing the targets infrastructure uses."
                  ],
                  "vulnerabilityRating": "6.6",
                  "description": "A hostile party could impersonate the client site and impersonate the\nuser’s session on this client. This could be achieved using DNS or\nARP spoofing. This applies to clients, which are web applications;\nthus, the redirect URI is not local to the host where the user’s\nbrowser is running.\nImpact: An attacker who intercepts the authorization \"code\" as it is\nsent by the browser to the callback endpoint can gain access to\nprotected resources by submitting the authorization \"code\" to the\nclient. The client will exchange the authorization \"code\" for an\naccess token and use the access token to access protected resources\nfor the benefit of the attacker, delivering protected resources to\nthe attacker, or modifying protected resources as directed by the\nattacker. If OAuth is used by the client to delegate authentication\nto a social site (e.g., as in the implementation of a \"Login\" button\non a third-party social network site), the attacker can use the\nintercepted authorization \"code\" to log into the client as the user.\n\nNote: Authenticating the client during authorization \"code\" exchange\nwill not help to detect such an attack, as it is the legitimate\nclient that obtains the tokens.",
                  "mitigation": "Countermeasures:\no In order to prevent an attacker from impersonating the end-user’s\nsession, the redirect URI of the client should point to an HTTPS\nprotected endpoint, and the browser should be utilized to\nauthenticate this redirect URI using server authentication"
                },
                {
                  "status": "Open",
                  "severity": "High",
                  "deinitionSource": "other",
                  "title": "Authorization code Leakage through Counterfeit Client",
                  "type": "The attacker leverages the authorization \"code\" grant type in an\nattempt to get another user (victim) to log in, authorize access to\nhis/her resources, and subsequently obtain the authorization \"code\"\nand inject it into a client application using the attacker’s account.\nThe goal is to associate an access authorization for resources of the\nvictim with the user account of the attacker on a client site.\nThe attacker abuses an existing client application and combines it\nwith his own counterfeit client web site. The attacker depends on\nthe victim expecting the client application to request access to a\ncertain resource server. The victim, seeing only a normal request\nfrom an expected application, approves the request. The attacker\nthen uses the victim’s authorization to gain access to the\ninformation unknowingly authorized by the victim.",
                  "vulnerabilityRating": "7.1",
                  "description": "The attacker conducts the following flow:\n1. The attacker accesses the client web site (or application) and\ninitiates data access to a particular resource server. The\nclient web site in turn initiates an authorization request to the\nresource server’s authorization server. Instead of proceeding\nwith the authorization process, the attacker modifies the\nauthorization server end-user authorization URL as constructed by\nthe client to include a redirect URI parameter referring to a web\nsite under his control (attacker’s web site).\n2. The attacker tricks another user (the victim) into opening that\nmodified end-user authorization URI and authorizing access (e.g.,\nvia an email link or blog link). The way the attacker achieves\nthis goal is out of scope.\n3. Having clicked the link, the victim is requested to authenticate\nand authorize the client site to have access.\n4. After completion of the authorization process, the authorization\nserver redirects the user agent to the attacker’s web site\ninstead of the original client web site.\n5. The attacker obtains the authorization \"code\" from his web site\nby means that are out of scope of this document.\n6. He then constructs a redirect URI to the target web site (or\napplication) based on the original authorization request’s\nredirect URI and the newly obtained authorization \"code\", and\ndirects his user agent to this URL. The authorization \"code\" is\ninjected into the original client site (or application).\n7. The client site uses the authorization \"code\" to fetch a token\nfrom the authorization server and associates this token with the\nattacker’s user account on this site.\n8. The attacker may now access the victim’s resources using the\nclient site.\n\nImpact: The attacker gains access to the victim’s resources as\nassociated with his account on the client site.",
                  "mitigation": "Countermeasures:\no The attacker will need to use another redirect URI for its\nauthorization process rather than the target web site because it\nneeds to intercept the flow. So, if the authorization server\nassociates the authorization \"code\" with the redirect URI of a\nparticular end-user authorization and validates this redirect URI\nwith the redirect URI passed to the token’s endpoint, such an\nattack is detected.\no The authorization server may also enforce the usage and validation\nof pre-registered redirect URIs. This will\nallow for early recognition of authorization \"code\" disclosure to\ncounterfeit clients.\no For native applications, one could also consider using deployment specific\nclient ids and secrets, along with\nthe binding of authorization \"codes\" to \"client_ids\" to detect such an attack because the attacker\ndoes not have access to the deployment-specific secret.Thus, he\nwill not be able to exchange the authorization \"code\".\no The client may consider using other flows that are not vulnerable\nto this kind of attack, such as the implicit grant type or resource owner password credentials."
                },
                {
                  "status": "Open",
                  "severity": "High",
                  "deinitionSource": "allcwe",
                  "title": "Authorization Code - CSRF Attack against redirect-uri",
                  "type": "All",
                  "subtype": "352 - Cross-Site Request Forgery (CSRF)",
                  "subCategorySummary": "The web application does not, or can not, sufficiently verify whether a well-formed, valid, consistent request was intentionally provided by the user who submitted the request.",
                  "attackPattern": "62 - Cross Site Request Forgery",
                  "attackPatternSummary": [
                    "An attacker crafts malicious web links and distributes them (via web pages, email, etc.), typically in a targeted manner, hoping to induce users to click on the link and execute the malicious action against some third-party application. If successful, the action embedded in the malicious link will be processed and accepted by the targeted application with the users' privilege level. This type of attack leverages the persistence and implicit trust placed in user session cookies by many web applications today. In such an architecture, once the user authenticates to an application and a session cookie is created on the user's system, all following transactions for that session are authenticated using that cookie including potential actions initiated by an attacker and simply \"riding\" the existing session cookie."
                  ],
                  "vulnerabilityRating": "8.0",
                  "description": "Cross-site request forgery (CSRF) is a web-based attack whereby HTTP\nrequests are transmitted from a user that the web site trusts or has\nauthenticated (e.g., via HTTP redirects or HTML forms). CSRF attacks\non OAuth approvals can allow an attacker to obtain authorization to\nOAuth protected resources without the consent of the user.\nThis attack works against the redirect URI used in the authorization\n\"code\" flow. An attacker could authorize an authorization \"code\" to\ntheir own protected resources on an authorization server. He then\naborts the redirect flow back to the client on his device and tricks\nthe victim into executing the redirect back to the client. The\nclient receives the redirect, fetches the token(s) from the\nauthorization server, and associates the victim’s client session with\nthe resources accessible using the token.\nImpact: The user accesses resources on behalf of the attacker. The\neffective impact depends on the type of resource accessed. For\nexample, the user may upload private items to an attacker’s\nresources. Or, when using OAuth in 3rd-party login scenarios, the\nuser may associate his client account with the attacker’s identity at\nthe external Identity Provider. In this way, the attacker could\neasily access the victim’s data at the client by logging in from\nanother device with his credentials at the external Identity\nProvider.",
                  "mitigation": "Countermeasures:\no The \"state\" parameter should be used to link the authorization\nrequest with the redirect URI used to deliver the access token\no Client developers and end users can be educated to not follow\nuntrusted URLs."
                }
              ],
              "attrs": {
                ".element-shape": {
                  "class": "element-shape hasOpenThreats isInScope"
                },
                "text": {
                  "text": "Web Aplication"
                },
                ".element-text": {
                  "class": "element-text hasOpenThreats isInScope"
                }
              }
            },
            {
              "type": "tm.Actor",
              "size": {
                "width": 160,
                "height": 80
              },
              "position": {
                "x": 377,
                "y": 1
              },
              "angle": 0,
              "id": "0fb01d7e-a2e5-40f5-a6a0-800e57fd9f30",
              "z": 3,
              "hasOpenThreats": true,
              "threats": [
                {
                  "status": "Open",
                  "severity": "Critical",
                  "deinitionSource": "allcwe",
                  "title": "End-User Credentials Phished Using Compromised or Embedded Browser",
                  "type": "All",
                  "subtype": "451 - User Interface (UI) Misrepresentation of Critical Information",
                  "subCategorySummary": "The user interface (UI) does not properly represent critical information to the user, allowing the information - or its source - to be obscured or spoofed. This is often a component in phishing attacks.",
                  "vulnerabilityRating": "9.5",
                  "description": "A malicious application could attempt to phish end-user passwords by\nmisusing an embedded browser in the end-user authorization process,\nor by presenting its own user interface instead of allowing a trusted\nsystem browser to render the authorization user interface. By doing\nso, the usual visual trust mechanisms may be bypassed (e.g.,\nTransport Layer Security (TLS) confirmation, web site mechanisms).\nBy using an embedded or internal client application user interface,\nthe client application has access to additional information to which\nit should not have access (e.g., UID/password).\n\nImpact: If the client application or the communication is\ncompromised, the user would not be aware of this, and all information\nin the authorization exchange, such as username and password, could\nbe captured.",
                  "mitigation": "Countermeasures:\no The OAuth flow is designed so that client applications never need\nto know user passwords. Client applications should avoid directly\nasking users for their credentials. In addition, end users could\nbe educated about phishing attacks and best practices, such as\nonly accessing trusted clients, as OAuth does not provide any\nprotection against malicious applications and the end user is\nsolely responsible for the trustworthiness of any native\napplication installed.\no Client applications could be validated prior to publication in an\napplication market for users to access. That validation is out of\nscope for OAuth but could include validating that the client\napplication handles user authentication in an appropriate way.\no Client developers should not write client applications that\ncollect authentication information directly from users and should\ninstead delegate this task to a trusted system component, e.g.,\nthe system browser."
                },
                {
                  "status": "Open",
                  "severity": "High",
                  "deinitionSource": "cwe",
                  "description": "An open redirector is an endpoint using a parameter to automatically\nredirect a user agent to the location specified by the parameter\nvalue without any validation. If the authorization server allows the\nclient to register only part of the redirect URI, an attacker can use\nan open redirector operated by the client to construct a redirect URI\nthat will pass the authorization server validation but will send the\nauthorization \"code\" or access token to an endpoint under the control\nof the attacker.\nImpact: An attacker could gain access to authorization \"codes\" or\naccess tokens.",
                  "mitigation": "Countermeasures:\no Require clients to register full redirect URI",
                  "title": "Open Redirectors on Client",
                  "type": "Validate Inputs",
                  "subtype": "601 - URL Redirection to Untrusted Site ('Open Redirect')",
                  "subCategorySummary": "A web application accepts a user-controlled input that specifies a link to an external site, and uses that link in a Redirect. This simplifies phishing attacks.",
                  "vulnerabilityRating": "8.7"
                },
                {
                  "status": "Open",
                  "severity": "High",
                  "deinitionSource": "allcwe",
                  "title": "Clickjacking Attack against Authorization",
                  "mitigation": "Countermeasures:\no For newer browsers, avoidance of iFrames during authorization can be enforced on the server side by using the X-FRAME-OPTIONS header.\no For older browsers, JavaScript frame-busting techniques can be used but may not be effective in all browsers",
                  "description": "With clickjacking, a malicious site loads the target site in a\ntransparent iFrame overlaid on top of a set of dummy\nbuttons that are carefully constructed to be placed directly under\nimportant buttons on the target site. When a user clicks a visible\nbutton, they are actually clicking a button (such as an \"Authorize\"\nbutton) on the hidden page.\nImpact: An attacker can steal a user’s authentication credentials and\naccess their resources.",
                  "vulnerabilityRating": "8.3",
                  "attackPattern": "103 - Clickjacking",
                  "attackPatternSummary": [
                    "In a clickjacking attack the victim is tricked into unknowingly initiating some action in one system while interacting with the UI from a seemingly completely different system. While being logged in to some target system, the victim visits the adversary's malicious site which displays a UI that the victim wishes to interact with. In reality, the clickjacked page has a transparent layer above the visible UI with action controls that the adversary wishes the victim to execute. The victim clicks on buttons or other UI elements they see on the page which actually triggers the action controls in the transparent overlaying layer. Depending on what that action control is, the adversary may have just tricked the victim into executing some potentially privileged (and most certainly undesired) functionality in the target system to which the victim is authenticated. The basic problem here is that there is a dichotomy between what the victim thinks they are clicking on versus what they are actually clicking on."
                  ],
                  "type": "All",
                  "subtype": "1021 - Improper Restriction of Rendered UI Layers or Frames",
                  "subCategorySummary": "The web application does not restrict or incorrectly restricts frame objects or UI layers that belong to another application or domain, which can lead to user confusion about which interface the user is interacting with."
                }
              ],
              "attrs": {
                ".element-shape": {
                  "class": "element-shape hasOpenThreats isInScope"
                },
                "text": {
                  "text": "Browser1"
                },
                ".element-text": {
                  "class": "element-text hasOpenThreats isInScope"
                }
              }
            },
            {
              "type": "tm.Process",
              "size": {
                "width": 100,
                "height": 100
              },
              "position": {
                "x": 597,
                "y": 272
              },
              "angle": 0,
              "id": "c686565f-0cb5-4c40-846d-9703aed937ad",
              "z": 4,
              "hasOpenThreats": true,
              "threats": [
                {
                  "status": "Open",
                  "severity": "High",
                  "deinitionSource": "cwe",
                  "title": "Authorization Endpoint - Malicious Client Obtains Existing Authorization by Fraud",
                  "type": "Authorize Actors",
                  "subtype": "863 - Incorrect Authorization",
                  "subCategorySummary": "The software performs an authorization check when an actor attempts to access a resource or perform an action, but it does not correctly perform the check. This allows attackers to bypass intended access restrictions.",
                  "attackPatternType": "Engage in Deceptive Interactions",
                  "attackPattern": "151 - Identity Spoofing",
                  "attackPatternSummary": [
                    "Identity Spoofing refers to the action of assuming (i.e., taking on) the identity of some other entity (human or non-human) and then using that identity to accomplish a goal. An adversary may craft messages that appear to come from a different principle or use stolen / spoofed authentication credentials. Alternatively, an adversary may intercept a message from a legitimate sender and attempt to make it look like the message comes from them without changing its content. The latter form of this attack can be used to hijack credentials from legitimate users. Identity Spoofing attacks need not be limited to transmitted messages - any resource that is associated with an identity (for example, a file with a signature) can be the target of an attack where the adversary attempts to change the apparent identity. This attack differs from Content Spoofing attacks where the adversary does not wish to change the apparent identity of the message but instead wishes to change what the message says. In an Identity Spoofing attack, the adversary is attempting to change the identity of the content."
                  ],
                  "description": "Authorization servers may wish to automatically process authorization\nrequests from clients that have been previously authorized by the\nuser. When the user is redirected to the authorization server’s enduser\nauthorization endpoint to grant access, the authorization server\ndetects that the user has already granted access to that particular\nclient. Instead of prompting the user for approval, the\nauthorization server automatically redirects the user back to the\nclient.\nA malicious client may exploit that feature and try to obtain such an\nauthorization \"code\" instead of the legitimate client.",
                  "vulnerabilityRating": "8.4",
                  "mitigation": "Countermeasures:\no Authorization servers should not automatically process repeat\nauthorizations to public clients unless the client is validated\nusing a pre-registered redirect URI.\no Authorization servers can mitigate the risks associated with\nautomatic processing by limiting the scope of access tokens\nobtained through automated approvals."
                },
                {
                  "status": "Open",
                  "severity": "High",
                  "deinitionSource": "cwe",
                  "title": "Authorization Endpoint - Open Redirector",
                  "type": "Validate Inputs",
                  "subtype": "601 - URL Redirection to Untrusted Site ('Open Redirect')",
                  "subCategorySummary": "A web application accepts a user-controlled input that specifies a link to an external site, and uses that link in a Redirect. This simplifies phishing attacks.",
                  "vulnerabilityRating": "8.7",
                  "description": "An attacker could use the end-user authorization endpoint and the\nredirect URI parameter to abuse the authorization server as an open\nredirector. An open redirector is an endpoint using a parameter to\nautomatically redirect a user agent to the location specified by the\nparameter value without any validation.\nImpact: An attacker could utilize a user’s trust in an authorization\nserver to launch a phishing attack.",
                  "mitigation": "Countermeasures:\no Require clients to register any full redirect URIs\no Don’t redirect to a redirect URI if the client identifier or\nredirect URI can’t be verified"
                },
                {
                  "status": "Open",
                  "severity": "Medium",
                  "deinitionSource": "cwe",
                  "title": "Token Endpoint - Obtaining Access Tokens and client id & secret from Authorization Server Database - SQL Injection",
                  "type": "Validate Inputs",
                  "subtype": "75 - Failure to Sanitize Special Elements into a Different Plane (Special Element Injection)",
                  "subCategorySummary": "The software does not adequately filter user-controlled input for special elements with control implications.",
                  "attackPattern": "66 - SQL Injection",
                  "attackPatternSummary": [
                    "This attack exploits target software that constructs SQL statements based on user input. An attacker crafts input strings so that when the target software constructs SQL statements based on the input, the resulting SQL statement performs actions other than those the application intended. SQL Injection results from failure of the application to appropriately validate input. When specially crafted user-controlled input consisting of SQL syntax is used without proper validation as part of SQL queries, it is possible to glean information from the database in ways not envisaged during application design. Depending upon the database and the design of the application, it may also be possible to leverage injection to have the database execute system-related commands of the attackers' choice. SQL Injection enables an attacker to talk directly to the database, thus bypassing the application completely. Successful injection can cause information disclosure as well as ability to add or modify data in the database. In order to successfully inject SQL and retrieve information from a database, an attacker:"
                  ],
                  "vulnerabilityRating": "6.8",
                  "description": "This threat is applicable if the authorization server stores access\ntokens as handles in a database. An attacker may obtain access\ntokens or client secret from the authorization server’s database by launching a SQL injection attack.\n\nImpact: \nDisclosure of all access tokens.\nDisclosure of all client_id/secret combinations. This allows the attacker to act on behalf of legitimate clients.",
                  "mitigation": "Countermeasures:\no Enforce standard SQL injection countermeasures"
                },
                {
                  "status": "Open",
                  "severity": "Medium",
                  "deinitionSource": "owasp",
                  "title": "Token Endpoint - Obtaining Access Tokens and Client Id & Secrets from Authorization Server Database - Unsecured Access",
                  "type": "OWASP Top Ten 2017 Category A5 - Broken Access Control",
                  "subtype": "284 - Improper Access Control",
                  "subCategorySummary": "The software does not restrict or incorrectly restricts access to a resource from an unauthorized actor.",
                  "attackPattern": "115 - Authentication Bypass",
                  "attackPatternSummary": [
                    "An attacker gains access to application, service, or device with the privileges of an authorized or privileged user by evading or circumventing an authentication mechanism. The attacker is therefore able to access protected data without authentication ever having taken place. This refers to an attacker gaining access equivalent to an authenticated user without ever going through an authentication procedure. This is usually the result of the attacker using an unexpected access procedure that does not go through the proper checkpoints where authentication should occur. For example, a web site might assume that all users will click through a given link in order to get to secure material and simply authenticate everyone that clicks the link. However, an attacker might be able to reach secured web content by explicitly entering the path to the content rather than clicking through the authentication link, thereby avoiding the check entirely. This attack pattern differs from other authentication attacks in that attacks of this pattern avoid authentication entirely, rather than faking authentication by exploiting flaws or by stealing credentials from legitimate users."
                  ],
                  "vulnerabilityRating": "6.9",
                  "description": "For Access Token - This threat is applicable if the authorization server stores access tokens as handles in a database. An attacker may obtain access\ntokens from the authorization server’s database by gaining access to\nthe database\n\nFor Client Secret - An attacker may obtain valid client_id/secret combinations from the authorization server’s database by gaining access to the database.\n\nImpact: \nDisclosure of all access tokens.\nDisclosure of all client_id/secret combinations. This allows the attacker to act on behalf of legitimate clients.",
                  "mitigation": "Countermeasures:\no Enforce system security measures\no Store access token hashes only or Enforce Credential Storage Protection Best Practices"
                },
                {
                  "status": "Open",
                  "severity": "High",
                  "deinitionSource": "other",
                  "title": "Token Endpoint - Obtaining Client Secret by Online Guessing",
                  "type": "Attacker may try to guess valid client_id/secret pairs",
                  "attackPattern": "112 - Brute Force",
                  "attackPatternSummary": [
                    "In this attack, some asset (information, functionality, identity, etc.) is protected by a finite secret value. The attacker attempts to gain access to this asset by using trial-and-error to exhaustively explore all the possible secret values in the hope of finding the secret (or a value that is functionally equivalent) that will unlock the asset. Examples of secrets can include, but are not limited to, passwords, encryption keys, database lookup keys, and initial values to one-way functions. The key factor in this attack is the attackers' ability to explore the possible secret space rapidly. This, in turn, is a function of the size of the secret space and the computational power the attacker is able to bring to bear on the problem. If the attacker has modest resources and the secret space is large, the challenge facing the attacker is intractable. While the defender cannot control the resources available to an attacker, they can control the size of the secret space. Creating a large secret space involves selecting one's secret from as large a field of equally likely alternative secrets as possible and ensuring that an attacker is unable to reduce the size of this field using available clues or cryptanalysis. Doing this is more difficult than it sounds since elimination of patterns (which, in turn, would provide an attacker clues that would help them reduce the space of potential secrets) is difficult to do using deterministic machines, such as computers. Assuming a finite secret space, a brute force attack will eventually succeed. The defender must rely on making sure that the time and resources necessary to do so will exceed the value of the information. For example, a secret space that will likely take hundreds of years to explore is likely safe from raw-brute force attacks."
                  ],
                  "vulnerabilityRating": "8.4",
                  "description": "An attacker may try to guess valid client_id/secret pairs.\nImpact: Disclosure of a single client_id/secret pair.",
                  "mitigation": "Countermeasures:\no Use high entropy for secrets.\no Lock accounts.\no Use strong client authentication."
                },
                {
                  "status": "Open",
                  "severity": "Medium",
                  "deinitionSource": "owasp",
                  "title": "Authorization code - Obtaining Authorization codes from Authorization Server Database - Access Issue",
                  "type": "OWASP Top Ten 2017 Category A5 - Broken Access Control",
                  "subtype": "284 - Improper Access Control",
                  "subCategorySummary": "The software does not restrict or incorrectly restricts access to a resource from an unauthorized actor.",
                  "attackPattern": "115 - Authentication Bypass",
                  "attackPatternSummary": [
                    "An attacker gains access to application, service, or device with the privileges of an authorized or privileged user by evading or circumventing an authentication mechanism. The attacker is therefore able to access protected data without authentication ever having taken place. This refers to an attacker gaining access equivalent to an authenticated user without ever going through an authentication procedure. This is usually the result of the attacker using an unexpected access procedure that does not go through the proper checkpoints where authentication should occur. For example, a web site might assume that all users will click through a given link in order to get to secure material and simply authenticate everyone that clicks the link. However, an attacker might be able to reach secured web content by explicitly entering the path to the content rather than clicking through the authentication link, thereby avoiding the check entirely. This attack pattern differs from other authentication attacks in that attacks of this pattern avoid authentication entirely, rather than faking authentication by exploiting flaws or by stealing credentials from legitimate users."
                  ],
                  "vulnerabilityRating": "6.2",
                  "description": "This threat is applicable if the authorization server stores\nauthorization codes as handles in a database. An attacker may\nobtain authorization codes from the authorization server’s database\nby gaining access to the database\n\nImpact: Disclosure of all authorization \"codes\", most likely along\nwith the respective \"redirect_uri\" and \"client_id\" values.",
                  "mitigation": "Countermeasures:\no Best practices for credential storage protection should be\nemployed.\no Enforce system security measures"
                },
                {
                  "status": "Open",
                  "severity": "Medium",
                  "deinitionSource": "cwe",
                  "title": "Authorization code - Obtaining Authorization codes from Authorization Server Database - SQL Injection",
                  "type": "Validate Inputs",
                  "subtype": "75 - Failure to Sanitize Special Elements into a Different Plane (Special Element Injection)",
                  "subCategorySummary": "The software does not adequately filter user-controlled input for special elements with control implications.",
                  "attackPattern": "66 - SQL Injection",
                  "attackPatternSummary": [
                    "This attack exploits target software that constructs SQL statements based on user input. An attacker crafts input strings so that when the target software constructs SQL statements based on the input, the resulting SQL statement performs actions other than those the application intended. SQL Injection results from failure of the application to appropriately validate input. When specially crafted user-controlled input consisting of SQL syntax is used without proper validation as part of SQL queries, it is possible to glean information from the database in ways not envisaged during application design. Depending upon the database and the design of the application, it may also be possible to leverage injection to have the database execute system-related commands of the attackers' choice. SQL Injection enables an attacker to talk directly to the database, thus bypassing the application completely. Successful injection can cause information disclosure as well as ability to add or modify data in the database. In order to successfully inject SQL and retrieve information from a database, an attacker:"
                  ],
                  "vulnerabilityRating": "6.6",
                  "description": "This threat is applicable if the authorization server stores\nauthorization \"codes\" as handles in a database. An attacker may\nobtain authorization \"codes\" from the authorization server’s database\nby launching a SQL injection\nattack.\nImpact: Disclosure of all authorization \"codes\", most likely along\nwith the respective \"redirect_uri\" and \"client_id\" values",
                  "mitigation": "Countermeasures:\nEnforce standard SQL injection countermeasures"
                },
                {
                  "status": "Open",
                  "severity": "Medium",
                  "deinitionSource": "other",
                  "title": "Authorization Code - Online Guessing",
                  "type": "Attacker may try to guess valid Authorization Code",
                  "attackPattern": "112 - Brute Force",
                  "attackPatternSummary": [
                    "In this attack, some asset (information, functionality, identity, etc.) is protected by a finite secret value. The attacker attempts to gain access to this asset by using trial-and-error to exhaustively explore all the possible secret values in the hope of finding the secret (or a value that is functionally equivalent) that will unlock the asset. Examples of secrets can include, but are not limited to, passwords, encryption keys, database lookup keys, and initial values to one-way functions. The key factor in this attack is the attackers' ability to explore the possible secret space rapidly. This, in turn, is a function of the size of the secret space and the computational power the attacker is able to bring to bear on the problem. If the attacker has modest resources and the secret space is large, the challenge facing the attacker is intractable. While the defender cannot control the resources available to an attacker, they can control the size of the secret space. Creating a large secret space involves selecting one's secret from as large a field of equally likely alternative secrets as possible and ensuring that an attacker is unable to reduce the size of this field using available clues or cryptanalysis. Doing this is more difficult than it sounds since elimination of patterns (which, in turn, would provide an attacker clues that would help them reduce the space of potential secrets) is difficult to do using deterministic machines, such as computers. Assuming a finite secret space, a brute force attack will eventually succeed. The defender must rely on making sure that the time and resources necessary to do so will exceed the value of the information. For example, a secret space that will likely take hundreds of years to explore is likely safe from raw-brute force attacks."
                  ],
                  "vulnerabilityRating": "6.2",
                  "description": "An attacker may try to guess valid authorization \"code\" values and\nsend the guessed code value using the grant type \"code\" in order to\nobtain a valid access token.\nImpact: Disclosure of a single access token and probably also an\nassociated refresh token.",
                  "mitigation": "Countermeasures:\no Handle-based tokens must use high entropy.\no Assertion-based tokens should be signed\no Authenticate the client; this adds another value that the attacker\nhas to guess.\no Bind the authorization \"code\" to the redirect URI; this adds\nanother value that the attacker has to guess.\no Use short expiry time for tokens."
                },
                {
                  "status": "Open",
                  "severity": "Medium",
                  "deinitionSource": "cwe",
                  "title": "Authorization Code - Malicious Client Obtains Authorization",
                  "type": "Authorize Actors",
                  "subtype": "863 - Incorrect Authorization",
                  "subCategorySummary": "The software performs an authorization check when an actor attempts to access a resource or perform an action, but it does not correctly perform the check. This allows attackers to bypass intended access restrictions.",
                  "attackPattern": "115 - Authentication Bypass",
                  "attackPatternSummary": [
                    "An attacker gains access to application, service, or device with the privileges of an authorized or privileged user by evading or circumventing an authentication mechanism. The attacker is therefore able to access protected data without authentication ever having taken place. This refers to an attacker gaining access equivalent to an authenticated user without ever going through an authentication procedure. This is usually the result of the attacker using an unexpected access procedure that does not go through the proper checkpoints where authentication should occur. For example, a web site might assume that all users will click through a given link in order to get to secure material and simply authenticate everyone that clicks the link. However, an attacker might be able to reach secured web content by explicitly entering the path to the content rather than clicking through the authentication link, thereby avoiding the check entirely. This attack pattern differs from other authentication attacks in that attacks of this pattern avoid authentication entirely, rather than faking authentication by exploiting flaws or by stealing credentials from legitimate users."
                  ],
                  "vulnerabilityRating": "6.7",
                  "description": "A malicious client could pretend to be a valid client and obtain an\naccess authorization in this way. The malicious client could even\nutilize screen-scraping techniques in order to simulate a user’s\nconsent in the authorization flow.",
                  "mitigation": "Countermeasures:\no The authorization server should authenticate the client, if\npossible. Note: The authentication takes\nplace after the end user has authorized the access.\no The authorization server should validate the client’s redirect URI\nagainst the pre-registered redirect URI, if one exists\n\nNote: An invalid redirect URI indicates an\ninvalid client, whereas a valid redirect URI does not necessarily\nindicate a valid client. The level of confidence depends on the\nclient type. For web applications, the level of confidence is\nhigh, since the redirect URI refers to the globally unique network\nendpoint of this application, whose fully qualified domain name\n(FQDN) is also validated using HTTPS server authentication by the\nuser agent. In contrast, for native clients, the redirect URI\ntypically refers to device local resources, e.g., a custom scheme.\nSo, a malicious client on a particular device can use the valid\nredirect URI the legitimate client uses on all other devices.\no After authenticating the end user, the authorization server should\nask him/her for consent. In this context, the authorization\nserver should explain to the end user the purpose, scope, and\nduration of the authorization the client asked for. Moreover, the\nauthorization server should show the user any identity information\nit has for that client. It is up to the user to validate the\nbinding of this data to the particular application (e.g., Name)\nand to approve the authorization request.\no The authorization server should not perform automatic\nre-authorizations for clients it is unable to reliably\nauthenticate or validate.\no If the authorization server automatically authenticates the end\nuser, it may nevertheless require some user input in order to\nprevent screen scraping. Examples are CAPTCHAs (Completely\nAutomated Public Turing tests to tell Computers and Humans Apart)\nor other multi-factor authentication techniques such as random\nquestions, token code generators, etc.\no The authorization server may also limit the scope of tokens it\nissues to clients it cannot reliably authenticate"
                },
                {
                  "status": "Open",
                  "severity": "High",
                  "deinitionSource": "other",
                  "title": "Resource Owner Impersonation",
                  "type": "Resource Owner Impersonation by having knowledge on structure of consent",
                  "description": "When a client requests access to protected resources, the\nauthorization flow normally involves the resource owner’s explicit\nresponse to the access request, either granting or denying access to\nthe protected resources. A malicious client can exploit knowledge of\nthe structure of this flow in order to gain authorization without the\nresource owner’s consent, by transmitting the necessary requests\nprogrammatically and simulating the flow against the authorization\nserver. That way, the client may gain access to the victim’s\nresources without her approval. An authorization server will be\nvulnerable to this threat if it uses non-interactive authentication\nmechanisms or splits the authorization flow across multiple pages.\nThe malicious client might embed a hidden HTML user agent, interpret\nthe HTML forms sent by the authorization server, and automatically\nsend the corresponding form HTTP POST requests. As a prerequisite,\nthe attacker must be able to execute the authorization process in the\ncontext of an already-authenticated session of the resource owner\nwith the authorization server. There are different ways to achieve\nthis:\no The malicious client could abuse an existing session in an\nexternal browser or cross-browser cookies on the particular\ndevice.\no The malicious client could also request authorization for an\ninitial scope acceptable to the user and then silently abuse the\nresulting session in his browser instance to \"silently\" request\nanother scope.\no Alternatively, the attacker might exploit an authorization\nserver’s ability to authenticate the resource owner automatically\nand without user interactions, e.g., based on certificates.\nIn all cases, such an attack is limited to clients running on the\nvictim’s device, either within the user agent or as a native app.",
                  "attackPattern": "633 - Token Impersonation",
                  "attackPatternSummary": [
                    "An adversary exploits a weakness in authentication to create an access token (or equivalent) that impersonates a different entity, and then associates a process/thread to that that impersonated token. This action causes a downstream user to make a decision or take action that is based on the assumed identity, and not the response that blocks the adversary."
                  ],
                  "mitigation": "Countermeasures:\nAuthorization servers should decide, based on an analysis of the risk\nassociated with this threat, whether to detect and prevent this\nthreat.\nIn order to prevent such an attack, the authorization server may\nforce a user interaction based on non-predictable input values as\npart of the user consent approval. The authorization server could\no combine password authentication and user consent in a single form,\no make use of CAPTCHAs, or\no use one-time secrets sent out of band to the resource owner (e.g.,\nvia text or instant message).\nAlternatively, in order to allow the resource owner to detect abuse,\nthe authorization server could notify the resource owner of any\napproval by appropriate means, e.g., text or instant message, or\nemail.",
                  "vulnerabilityRating": "7.8"
                },
                {
                  "status": "Open",
                  "severity": "High",
                  "deinitionSource": "owasp",
                  "title": "Refresh Token - Obtaining Refresh Token from Authorization Server Database - ByPass Access",
                  "type": "OWASP Top Ten 2017 Category A5 - Broken Access Control",
                  "subtype": "284 - Improper Access Control",
                  "subCategorySummary": "The software does not restrict or incorrectly restricts access to a resource from an unauthorized actor.",
                  "attackPattern": "180 - Exploiting Incorrectly Configured Access Control Security Levels",
                  "attackPatternSummary": [
                    "An attacker exploits a weakness in the configuration of access controls and is able to bypass the intended protection that these measures guard against and thereby obtain unauthorized access to the system or network. Sensitive functionality should always be protected with access controls. However configuring all but the most trivial access control systems can be very complicated and there are many opportunities for mistakes. If an attacker can learn of incorrectly configured access security settings, they may be able to exploit this in an attack. Most commonly, attackers would take advantage of controls that provided too little protection for sensitive activities in order to perform actions that should be denied to them. In some circumstances, an attacker may be able to take advantage of overly restrictive access control policies, initiating denial of services (if an application locks because it unexpectedly failed to be granted access) or causing other legitimate actions to fail due to security. The latter class of attacks, however, is usually less severe and easier to detect than attacks based on inadequate security restrictions. This attack pattern differs from CAPEC 1, \"Accessing Functionality Not Properly Constrained by ACLs\" in that the latter describes attacks where sensitive functionality lacks access controls, where, in this pattern, the access control is present, but incorrectly configured."
                  ],
                  "vulnerabilityRating": "8.1",
                  "description": "This threat is applicable if the authorization server stores refresh tokens as handles in a database. An attacker may obtain refresh tokens from the authorization server’s database by gaining access to the database\n\nImpact: Disclosure of all refresh tokens.",
                  "mitigation": "Countermeasures:\no Enforce credential storage protection best practices.\no Bind token to client id, if the attacker cannot obtain the\nrequired id and secret"
                },
                {
                  "status": "Open",
                  "severity": "High",
                  "deinitionSource": "cwe",
                  "title": "Refresh Token - Obtaining Refresh Token from Authorization Server Database - SQL Injection",
                  "type": "Validate Inputs",
                  "subtype": "75 - Failure to Sanitize Special Elements into a Different Plane (Special Element Injection)",
                  "subCategorySummary": "The software does not adequately filter user-controlled input for special elements with control implications.",
                  "attackPattern": "66 - SQL Injection",
                  "attackPatternSummary": [
                    "This attack exploits target software that constructs SQL statements based on user input. An attacker crafts input strings so that when the target software constructs SQL statements based on the input, the resulting SQL statement performs actions other than those the application intended. SQL Injection results from failure of the application to appropriately validate input. When specially crafted user-controlled input consisting of SQL syntax is used without proper validation as part of SQL queries, it is possible to glean information from the database in ways not envisaged during application design. Depending upon the database and the design of the application, it may also be possible to leverage injection to have the database execute system-related commands of the attackers' choice. SQL Injection enables an attacker to talk directly to the database, thus bypassing the application completely. Successful injection can cause information disclosure as well as ability to add or modify data in the database. In order to successfully inject SQL and retrieve information from a database, an attacker:"
                  ],
                  "mitigation": "Countermeasures:\no Enforce credential storage protection best practices.\no Bind token to client id, if the attacker cannot obtain the\nrequired id and secret",
                  "description": "This threat is applicable if the authorization server stores refresh\ntokens as handles in a database. An attacker may obtain refresh\ntokens from the authorization server’s database by launching a SQL injection attack.\nImpact: Disclosure of all refresh tokens.",
                  "vulnerabilityRating": "8.1"
                },
                {
                  "status": "Open",
                  "severity": "High",
                  "deinitionSource": "other",
                  "title": "Refresh Token - Obtaining Refresh Token by Online Guessing",
                  "type": "An attacker may try to guess refresh token",
                  "attackPattern": "112 - Brute Force",
                  "attackPatternSummary": [
                    "In this attack, some asset (information, functionality, identity, etc.) is protected by a finite secret value. The attacker attempts to gain access to this asset by using trial-and-error to exhaustively explore all the possible secret values in the hope of finding the secret (or a value that is functionally equivalent) that will unlock the asset. Examples of secrets can include, but are not limited to, passwords, encryption keys, database lookup keys, and initial values to one-way functions. The key factor in this attack is the attackers' ability to explore the possible secret space rapidly. This, in turn, is a function of the size of the secret space and the computational power the attacker is able to bring to bear on the problem. If the attacker has modest resources and the secret space is large, the challenge facing the attacker is intractable. While the defender cannot control the resources available to an attacker, they can control the size of the secret space. Creating a large secret space involves selecting one's secret from as large a field of equally likely alternative secrets as possible and ensuring that an attacker is unable to reduce the size of this field using available clues or cryptanalysis. Doing this is more difficult than it sounds since elimination of patterns (which, in turn, would provide an attacker clues that would help them reduce the space of potential secrets) is difficult to do using deterministic machines, such as computers. Assuming a finite secret space, a brute force attack will eventually succeed. The defender must rely on making sure that the time and resources necessary to do so will exceed the value of the information. For example, a secret space that will likely take hundreds of years to explore is likely safe from raw-brute force attacks."
                  ],
                  "vulnerabilityRating": "8.1",
                  "description": "An attacker may try to guess valid refresh token values and send it\nusing the grant type \"refresh_token\" in order to obtain a valid\naccess token.\nImpact: Exposure of a single refresh token and derivable access\ntokens.",
                  "mitigation": "Countermeasures:\no Bind token to client id, because the attacker would guess the\nmatching client id, too.\no Authenticate the client; this adds another element that the\nattacker has to guess"
                }
              ],
              "attrs": {
                ".element-shape": {
                  "class": "element-shape hasOpenThreats isInScope"
                },
                "text": {
                  "text": "Authorization\nServer"
                },
                ".element-text": {
                  "class": "element-text hasOpenThreats isInScope"
                }
              }
            },
            {
              "type": "tm.Process",
              "size": {
                "width": 100,
                "height": 100
              },
              "position": {
                "x": 136,
                "y": 475
              },
              "angle": 0,
              "id": "79fd3586-ab8d-4df8-a923-8a99f1665994",
              "z": 5,
              "hasOpenThreats": false,
              "attrs": {
                ".element-shape": {
                  "class": "element-shape hasNoOpenThreats isInScope"
                },
                "text": {
                  "text": "User Connector"
                },
                ".element-text": {
                  "class": "element-text hasNoOpenThreats isInScope"
                }
              }
            },
            {
              "type": "tm.Flow",
              "smooth": true,
              "source": {
                "id": "0fb01d7e-a2e5-40f5-a6a0-800e57fd9f30"
              },
              "target": {
                "id": "bb4de7b9-ffe5-4774-bc73-0591a6935f81"
              },
              "vertices": [
                {
                  "x": 248,
                  "y": 127
                }
              ],
              "id": "8546501e-9e7d-4b9e-b098-e68a96ec9feb",
              "labels": [
                {
                  "position": {
                    "distance": 0.5139348269623991,
                    "offset": 8.534036169410683
                  },
                  "attrs": {
                    "text": {
                      "text": "1. access",
                      "font-weight": "400",
                      "font-size": "small"
                    }
                  }
                }
              ],
              "z": 6,
              "hasOpenThreats": false,
              "attrs": {
                ".marker-target": {
                  "class": "marker-target hasNoOpenThreats isInScope"
                },
                ".connection": {
                  "class": "connection hasNoOpenThreats isInScope"
                }
              }
            },
            {
              "type": "tm.Flow",
              "smooth": true,
              "source": {
                "id": "bb4de7b9-ffe5-4774-bc73-0591a6935f81"
              },
              "target": {
                "id": "c686565f-0cb5-4c40-846d-9703aed937ad"
              },
              "vertices": [
                {
                  "x": 340,
                  "y": 293
                }
              ],
              "id": "b1d0e37c-7511-4587-bd01-3996e2339916",
              "labels": [
                {
                  "position": 0.5,
                  "attrs": {
                    "text": {
                      "text": "2. redirect",
                      "font-weight": "400",
                      "font-size": "small"
                    }
                  }
                }
              ],
              "z": 7,
              "hasOpenThreats": false,
              "attrs": {
                ".marker-target": {
                  "class": "marker-target hasNoOpenThreats isInScope"
                },
                ".connection": {
                  "class": "connection hasNoOpenThreats isInScope"
                }
              }
            },
            {
              "type": "tm.Flow",
              "smooth": true,
              "source": {
                "id": "c686565f-0cb5-4c40-846d-9703aed937ad"
              },
              "target": {
                "id": "c686565f-0cb5-4c40-846d-9703aed937ad"
              },
              "vertices": [
                {
                  "x": 588,
                  "y": 193
                },
                {
                  "x": 557,
                  "y": 207
                }
              ],
              "id": "ad098673-879a-466b-9717-e48ccb3b00f3",
              "labels": [
                {
                  "position": 0.5,
                  "attrs": {
                    "text": {
                      "text": "3. validate session",
                      "font-weight": "400",
                      "font-size": "small"
                    }
                  }
                }
              ],
              "z": 8,
              "hasOpenThreats": false,
              "attrs": {
                ".marker-target": {
                  "class": "marker-target hasNoOpenThreats isInScope"
                },
                ".connection": {
                  "class": "connection hasNoOpenThreats isInScope"
                }
              }
            },
            {
              "type": "tm.Flow",
              "smooth": true,
              "source": {
                "id": "c686565f-0cb5-4c40-846d-9703aed937ad"
              },
              "target": {
                "id": "79fd3586-ab8d-4df8-a923-8a99f1665994"
              },
              "vertices": [
                {
                  "x": 403,
                  "y": 457
                }
              ],
              "id": "9e3fcd99-044d-4415-bcfa-10c902a9d3b9",
              "labels": [
                {
                  "position": 0.5,
                  "attrs": {
                    "text": {
                      "text": "4. redirect to login w/\nlogin identifier",
                      "font-weight": "400",
                      "font-size": "small"
                    }
                  }
                }
              ],
              "z": 9,
              "hasOpenThreats": false,
              "attrs": {
                ".marker-target": {
                  "class": "marker-target hasNoOpenThreats isInScope"
                },
                ".connection": {
                  "class": "connection hasNoOpenThreats isInScope"
                }
              }
            },
            {
              "type": "tm.Flow",
              "smooth": true,
              "source": {
                "id": "79fd3586-ab8d-4df8-a923-8a99f1665994"
              },
              "target": {
                "id": "c686565f-0cb5-4c40-846d-9703aed937ad"
              },
              "vertices": [
                {
                  "x": 311,
                  "y": 422
                }
              ],
              "id": "3a660c0d-ca05-4319-8179-799da80e6ed1",
              "labels": [
                {
                  "position": 0.5,
                  "attrs": {
                    "text": {
                      "text": "5. ask for login info by\nidentifier",
                      "font-weight": "400",
                      "font-size": "small"
                    }
                  }
                }
              ],
              "z": 10,
              "hasOpenThreats": false,
              "attrs": {
                ".marker-target": {
                  "class": "marker-target hasNoOpenThreats isInScope"
                },
                ".connection": {
                  "class": "connection hasNoOpenThreats isInScope"
                }
              }
            },
            {
              "type": "tm.Flow",
              "smooth": true,
              "source": {
                "id": "c686565f-0cb5-4c40-846d-9703aed937ad"
              },
              "target": {
                "id": "79fd3586-ab8d-4df8-a923-8a99f1665994"
              },
              "vertices": [
                {
                  "x": 356,
                  "y": 347
                }
              ],
              "id": "0a980ed1-4a17-4db8-80a7-12b5584ac1c5",
              "labels": [
                {
                  "position": {
                    "distance": 0.5942920908681534,
                    "offset": -5.55572651932016
                  },
                  "attrs": {
                    "text": {
                      "text": "6. return login info",
                      "font-weight": "400",
                      "font-size": "small"
                    }
                  }
                }
              ],
              "z": 11,
              "hasOpenThreats": false,
              "attrs": {
                ".marker-target": {
                  "class": "marker-target hasNoOpenThreats isInScope"
                },
                ".connection": {
                  "class": "connection hasNoOpenThreats isInScope"
                }
              }
            },
            {
              "type": "tm.Flow",
              "smooth": true,
              "source": {
                "id": "79fd3586-ab8d-4df8-a923-8a99f1665994"
              },
              "target": {
                "id": "0fb01d7e-a2e5-40f5-a6a0-800e57fd9f30"
              },
              "vertices": [
                {
                  "x": 203,
                  "y": 303
                }
              ],
              "id": "1f4ef002-3312-4e4f-b366-48c6bab4a42a",
              "labels": [
                {
                  "position": {
                    "distance": 0.38924682111680176,
                    "offset": 17.558757273014635
                  },
                  "attrs": {
                    "text": {
                      "text": "7. login page",
                      "font-weight": "400",
                      "font-size": "small"
                    }
                  }
                }
              ],
              "z": 12,
              "hasOpenThreats": false,
              "attrs": {
                ".marker-target": {
                  "class": "marker-target hasNoOpenThreats isInScope"
                },
                ".connection": {
                  "class": "connection hasNoOpenThreats isInScope"
                }
              }
            },
            {
              "type": "tm.Flow",
              "smooth": true,
              "source": {
                "id": "0fb01d7e-a2e5-40f5-a6a0-800e57fd9f30"
              },
              "target": {
                "id": "79fd3586-ab8d-4df8-a923-8a99f1665994"
              },
              "vertices": [
                {
                  "x": 282,
                  "y": 339
                }
              ],
              "id": "12068bd1-8ade-44d9-9415-ccfa183f28da",
              "labels": [
                {
                  "position": {
                    "distance": 0.5789594282934661,
                    "offset": -23.558691354934126
                  },
                  "attrs": {
                    "text": {
                      "text": "8. submit credentials",
                      "font-weight": "400",
                      "font-size": "small"
                    }
                  }
                }
              ],
              "z": 13,
              "hasOpenThreats": true,
              "threats": [
                {
                  "status": "Open",
                  "severity": "High",
                  "deinitionSource": "cwe",
                  "title": "Authorization Endpoint - Password Phishing by Counterfeit Authorization Server",
                  "type": "Validate Inputs",
                  "subtype": "601 - URL Redirection to Untrusted Site ('Open Redirect')",
                  "subCategorySummary": "A web application accepts a user-controlled input that specifies a link to an external site, and uses that link in a Redirect. This simplifies phishing attacks.",
                  "vulnerabilityRating": "8.6",
                  "description": "OAuth makes no attempt to verify the authenticity of the\nauthorization server. A hostile party could take advantage of this\nby intercepting the client’s requests and returning misleading or\notherwise incorrect responses. This could be achieved using DNS or\nAddress Resolution Protocol (ARP) spoofing. Wide deployment of OAuth\nand similar protocols may cause users to become inured to the\npractice of being redirected to web sites where they are asked to\nenter their passwords. If users are not careful to verify the\nauthenticity of these web sites before entering their credentials, it\nwill be possible for attackers to exploit this practice to steal\nusers’ passwords.",
                  "mitigation": "Countermeasures:\no Authorization servers should consider such attacks when developing\nservices based on OAuth and should require the use of transportlayer\nsecurity for any requests where the authenticity of the\nauthorization server or of request responses is an issue.\no Authorization servers should attempt to educate users about the\nrisks posed by phishing attacks and should provide mechanisms that\nmake it easy for users to confirm the authenticity of their sites.",
                  "attackPatternType": "Engage in Deceptive Interactions",
                  "attackPattern": "151 - Identity Spoofing",
                  "attackPatternSummary": [
                    "Identity Spoofing refers to the action of assuming (i.e., taking on) the identity of some other entity (human or non-human) and then using that identity to accomplish a goal. An adversary may craft messages that appear to come from a different principle or use stolen / spoofed authentication credentials. Alternatively, an adversary may intercept a message from a legitimate sender and attempt to make it look like the message comes from them without changing its content. The latter form of this attack can be used to hijack credentials from legitimate users. Identity Spoofing attacks need not be limited to transmitted messages - any resource that is associated with an identity (for example, a file with a signature) can be the target of an attack where the adversary attempts to change the apparent identity. This attack differs from Content Spoofing attacks where the adversary does not wish to change the apparent identity of the message but instead wishes to change what the message says. In an Identity Spoofing attack, the adversary is attempting to change the identity of the content."
                  ]
                }
              ],
              "attrs": {
                ".marker-target": {
                  "class": "marker-target hasOpenThreats isInScope"
                },
                ".connection": {
                  "class": "connection hasOpenThreats isInScope"
                }
              }
            },
            {
              "type": "tm.Flow",
              "smooth": true,
              "source": {
                "id": "79fd3586-ab8d-4df8-a923-8a99f1665994"
              },
              "target": {
                "id": "79fd3586-ab8d-4df8-a923-8a99f1665994"
              },
              "vertices": [
                {
                  "x": 58,
                  "y": 476
                },
                {
                  "x": 50,
                  "y": 521
                }
              ],
              "id": "7a772480-c7c8-45a3-8b2d-a0a490141ffe",
              "labels": [
                {
                  "position": {
                    "distance": 0.7051372516532772,
                    "offset": -10.207515160436742
                  },
                  "attrs": {
                    "text": {
                      "text": "9. validate credentials",
                      "font-weight": "400",
                      "font-size": "small"
                    }
                  }
                }
              ],
              "z": 14,
              "hasOpenThreats": false,
              "attrs": {
                ".marker-target": {
                  "class": "marker-target hasNoOpenThreats isInScope"
                },
                ".connection": {
                  "class": "connection hasNoOpenThreats isInScope"
                }
              }
            },
            {
              "type": "tm.Flow",
              "smooth": true,
              "source": {
                "id": "79fd3586-ab8d-4df8-a923-8a99f1665994"
              },
              "target": {
                "id": "c686565f-0cb5-4c40-846d-9703aed937ad"
              },
              "vertices": [
                {
                  "x": 468,
                  "y": 489
                }
              ],
              "id": "404e24f8-240f-48b9-ac68-c8094c971a3a",
              "labels": [
                {
                  "position": 0.5,
                  "attrs": {
                    "text": {
                      "text": "10. send login result",
                      "font-weight": "400",
                      "font-size": "small"
                    }
                  }
                }
              ],
              "z": 15,
              "hasOpenThreats": false,
              "threats": [],
              "attrs": {
                ".marker-target": {
                  "class": "marker-target hasNoOpenThreats isInScope"
                },
                ".connection": {
                  "class": "connection hasNoOpenThreats isInScope"
                }
              }
            },
            {
              "type": "tm.Flow",
              "smooth": true,
              "source": {
                "id": "c686565f-0cb5-4c40-846d-9703aed937ad"
              },
              "target": {
                "id": "c686565f-0cb5-4c40-846d-9703aed937ad"
              },
              "vertices": [
                {
                  "x": 722,
                  "y": 250
                },
                {
                  "x": 687,
                  "y": 225
                },
                {
                  "x": 634,
                  "y": 222
                }
              ],
              "id": "1afaf2f9-63c2-4bab-be9d-68632d59fc61",
              "labels": [
                {
                  "position": 0.5,
                  "attrs": {
                    "text": {
                      "text": "13. if consent is\nneeded",
                      "font-weight": "400",
                      "font-size": "small"
                    }
                  }
                }
              ],
              "z": 17,
              "hasOpenThreats": false,
              "attrs": {
                ".marker-target": {
                  "class": "marker-target hasNoOpenThreats isInScope"
                },
                ".connection": {
                  "class": "connection hasNoOpenThreats isInScope"
                }
              }
            },
            {
              "type": "tm.Flow",
              "smooth": true,
              "source": {
                "id": "c686565f-0cb5-4c40-846d-9703aed937ad"
              },
              "target": {
                "id": "79fd3586-ab8d-4df8-a923-8a99f1665994"
              },
              "vertices": [
                {
                  "x": 487,
                  "y": 531
                }
              ],
              "id": "ebf35252-7795-49cf-bc6a-06d726422666",
              "labels": [
                {
                  "position": 0.5,
                  "attrs": {
                    "text": {
                      "text": "11. return redirect url\nw/ login_verifier",
                      "font-weight": "400",
                      "font-size": "small"
                    }
                  }
                }
              ],
              "z": 18,
              "hasOpenThreats": false,
              "attrs": {
                ".marker-target": {
                  "class": "marker-target hasNoOpenThreats isInScope"
                },
                ".connection": {
                  "class": "connection hasNoOpenThreats isInScope"
                }
              }
            },
            {
              "type": "tm.Flow",
              "smooth": true,
              "source": {
                "id": "c686565f-0cb5-4c40-846d-9703aed937ad"
              },
              "target": {
                "id": "79fd3586-ab8d-4df8-a923-8a99f1665994"
              },
              "vertices": [
                {
                  "x": 551,
                  "y": 594
                },
                {
                  "x": 333,
                  "y": 590
                }
              ],
              "id": "69b5126b-8c6e-4881-b71f-32e7fbbd70e9",
              "labels": [
                {
                  "position": 0.5,
                  "attrs": {
                    "text": {
                      "text": "14. redirect to\nconsent url",
                      "font-weight": "400",
                      "font-size": "small"
                    }
                  }
                }
              ],
              "z": 19,
              "hasOpenThreats": false,
              "attrs": {
                ".marker-target": {
                  "class": "marker-target hasNoOpenThreats isInScope"
                },
                ".connection": {
                  "class": "connection hasNoOpenThreats isInScope"
                }
              }
            },
            {
              "type": "tm.Flow",
              "smooth": true,
              "source": {
                "id": "79fd3586-ab8d-4df8-a923-8a99f1665994"
              },
              "target": {
                "id": "c686565f-0cb5-4c40-846d-9703aed937ad"
              },
              "vertices": [
                {
                  "x": 508,
                  "y": 566
                }
              ],
              "id": "d4ae6817-50bb-47a8-a47b-80f6ef6b9008",
              "labels": [
                {
                  "position": 0.5,
                  "attrs": {
                    "text": {
                      "text": "12.redirect to redirec\nt url w/ login_verifier",
                      "font-weight": "400",
                      "font-size": "small"
                    }
                  }
                }
              ],
              "z": 20,
              "hasOpenThreats": false,
              "attrs": {
                ".marker-target": {
                  "class": "marker-target hasNoOpenThreats isInScope"
                },
                ".connection": {
                  "class": "connection hasNoOpenThreats isInScope"
                }
              }
            },
            {
              "type": "tm.Flow",
              "smooth": true,
              "source": {
                "id": "79fd3586-ab8d-4df8-a923-8a99f1665994"
              },
              "target": {
                "id": "c686565f-0cb5-4c40-846d-9703aed937ad"
              },
              "vertices": [
                {
                  "x": 399,
                  "y": 645
                },
                {
                  "x": 585,
                  "y": 609
                }
              ],
              "id": "ace4d39c-d63d-490f-8d6c-66a312f23655",
              "labels": [
                {
                  "position": 0.5,
                  "attrs": {
                    "text": {
                      "text": "15. ask for consent by\nlogin_verifier",
                      "font-weight": "400",
                      "font-size": "small"
                    }
                  }
                }
              ],
              "z": 21,
              "hasOpenThreats": false,
              "attrs": {
                ".marker-target": {
                  "class": "marker-target hasNoOpenThreats isInScope"
                },
                ".connection": {
                  "class": "connection hasNoOpenThreats isInScope"
                }
              }
            },
            {
              "type": "tm.Flow",
              "smooth": true,
              "source": {
                "id": "79fd3586-ab8d-4df8-a923-8a99f1665994"
              },
              "target": {
                "id": "0fb01d7e-a2e5-40f5-a6a0-800e57fd9f30"
              },
              "vertices": [
                {
                  "x": 62,
                  "y": 251
                },
                {
                  "x": 195,
                  "y": 99
                }
              ],
              "id": "d8fd3daf-64bc-4bd2-af73-79b7bf99e31c",
              "labels": [
                {
                  "position": {
                    "distance": 0.8512736554291168,
                    "offset": -8.605909885372967
                  },
                  "attrs": {
                    "text": {
                      "text": "17. consent page",
                      "font-weight": "400",
                      "font-size": "small"
                    }
                  }
                }
              ],
              "z": 22,
              "hasOpenThreats": false,
              "attrs": {
                ".marker-target": {
                  "class": "marker-target hasNoOpenThreats isInScope"
                },
                ".connection": {
                  "class": "connection hasNoOpenThreats isInScope"
                }
              }
            },
            {
              "type": "tm.Flow",
              "smooth": true,
              "source": {
                "id": "c686565f-0cb5-4c40-846d-9703aed937ad"
              },
              "target": {
                "id": "79fd3586-ab8d-4df8-a923-8a99f1665994"
              },
              "vertices": [
                {
                  "x": 641,
                  "y": 508
                },
                {
                  "x": 582,
                  "y": 661
                },
                {
                  "x": 382,
                  "y": 671
                }
              ],
              "id": "86a78aa1-2913-45e6-ad92-b88ad31a7e62",
              "labels": [
                {
                  "position": 0.5,
                  "attrs": {
                    "text": {
                      "text": "16. return consent\ninfo",
                      "font-weight": "400",
                      "font-size": "small"
                    }
                  }
                }
              ],
              "z": 24,
              "hasOpenThreats": false,
              "attrs": {
                ".marker-target": {
                  "class": "marker-target hasNoOpenThreats isInScope"
                },
                ".connection": {
                  "class": "connection hasNoOpenThreats isInScope"
                }
              }
            },
            {
              "type": "tm.Flow",
              "smooth": true,
              "source": {
                "id": "0fb01d7e-a2e5-40f5-a6a0-800e57fd9f30"
              },
              "target": {
                "id": "79fd3586-ab8d-4df8-a923-8a99f1665994"
              },
              "vertices": [
                {
                  "x": 207,
                  "y": 29
                },
                {
                  "x": 23,
                  "y": 183
                },
                {
                  "x": 62,
                  "y": 389
                }
              ],
              "id": "331b53f5-8946-4026-8c03-fa3fcddc6a00",
              "labels": [
                {
                  "position": {
                    "distance": 0.4972780905298321,
                    "offset": -9.164041828043992
                  },
                  "attrs": {
                    "text": {
                      "text": "18.submit consent",
                      "font-weight": "400",
                      "font-size": "small"
                    }
                  }
                }
              ],
              "z": 25,
              "hasOpenThreats": false,
              "threats": [],
              "attrs": {
                ".marker-target": {
                  "class": "marker-target hasNoOpenThreats isInScope"
                },
                ".connection": {
                  "class": "connection hasNoOpenThreats isInScope"
                }
              }
            },
            {
              "type": "tm.Flow",
              "smooth": true,
              "source": {
                "id": "79fd3586-ab8d-4df8-a923-8a99f1665994"
              },
              "target": {
                "id": "c686565f-0cb5-4c40-846d-9703aed937ad"
              },
              "vertices": [
                {
                  "x": 389,
                  "y": 699
                },
                {
                  "x": 633,
                  "y": 664
                },
                {
                  "x": 665,
                  "y": 456
                }
              ],
              "id": "09ec07d0-1790-48d7-9938-b92c3bf6ad2c",
              "labels": [
                {
                  "position": 0.5,
                  "attrs": {
                    "text": {
                      "text": "19. send consent data",
                      "font-weight": "400",
                      "font-size": "small"
                    }
                  }
                }
              ],
              "z": 26,
              "hasOpenThreats": true,
              "threats": [
                {
                  "status": "Open",
                  "severity": "Medium",
                  "deinitionSource": "cwe",
                  "mitigation": "Countermeasures:\no Explain the scope (resources and the permissions) the user is\nabout to grant in an understandable way.\no Narrow the scope, based on the client. When obtaining end-user\nauthorization and where the client requests scope, the\nauthorization server may want to consider whether to honor that\nscope based on the client identifier. That decision is between\nthe client and authorization server and is outside the scope of\nthis spec. The authorization server may also want to consider\nwhat scope to grant based on the client type, e.g., providing\nlower scope to public clients.",
                  "description": "When obtaining end-user authorization, the end user may not\nunderstand the scope of the access being granted and to whom, or they\nmay end up providing a client with access to resources that should\nnot be permitted.",
                  "vulnerabilityRating": "4.8",
                  "title": "Authorization Endpoint - User Unintentionally Grants Too Much Access Scope",
                  "type": "Limit Access",
                  "subtype": "250 - Execution with Unnecessary Privileges",
                  "subCategorySummary": "The software performs an operation at a privilege level that is higher than the minimum level required, which creates new weaknesses or amplifies the consequences of other weaknesses."
                }
              ],
              "attrs": {
                ".marker-target": {
                  "class": "marker-target hasOpenThreats isInScope"
                },
                ".connection": {
                  "class": "connection hasOpenThreats isInScope"
                }
              }
            },
            {
              "type": "tm.Flow",
              "smooth": true,
              "source": {
                "id": "c686565f-0cb5-4c40-846d-9703aed937ad"
              },
              "target": {
                "id": "bb4de7b9-ffe5-4774-bc73-0591a6935f81"
              },
              "vertices": [
                {
                  "x": 393,
                  "y": 257
                }
              ],
              "id": "e4939718-850c-4372-975c-89a0abb5a4f6",
              "labels": [
                {
                  "position": {
                    "distance": 0.5439224362060107,
                    "offset": -2.644635373726487
                  },
                  "attrs": {
                    "text": {
                      "text": "23.redirect with auth\ncode",
                      "font-weight": "400",
                      "font-size": "small"
                    }
                  }
                }
              ],
              "z": 27,
              "hasOpenThreats": true,
              "threats": [
                {
                  "status": "Open",
                  "severity": "Medium",
                  "deinitionSource": "cwe",
                  "title": "Authorization code - Eavesdropping or Leaking Authorization codes",
                  "type": "Authorize Actors",
                  "subtype": "300 - Channel Accessible by Non-Endpoint ('Man-in-the-Middle')",
                  "subCategorySummary": "The product does not adequately verify the identity of actors at both ends of a communication channel, or does not adequately ensure the integrity of the channel, in a way that allows the channel to be accessed or influenced by an actor that is not an endpoint.",
                  "attackPattern": "158 - Sniffing Network Traffic",
                  "attackPatternSummary": [
                    "In this attack pattern, the adversary monitors network traffic between nodes of a public or multicast network in an attempt to capture sensitive information at the protocol level. Network sniffing applications can reveal TCP/IP, DNS, Ethernet, and other low-level network communication information. The adversary takes a passive role in this attack pattern and simply observes and analyzes the traffic. The adversary may precipitate or indirectly influence the content of the observed transaction, but is never the intended recipient of the target information."
                  ],
                  "description": "An attacker could try to eavesdrop transmission of the authorization code between the authorization server and client.",
                  "mitigation": "Countermeasures:\no As per the core OAuth spec, the authorization server as well as\nthe client must ensure that these transmissions are protected\nusing transport-layer mechanisms such as TLS\no The authorization server will require the client to authenticate\nwherever possible, so the binding of the authorization code to a\ncertain client can be validated in a reliable way.\no Use short expiry time for authorization codes.\no The authorization server should enforce a one-time usage\nrestriction",
                  "vulnerabilityRating": "6.6"
                }
              ],
              "attrs": {
                ".marker-target": {
                  "class": "marker-target hasOpenThreats isInScope"
                },
                ".connection": {
                  "class": "connection hasOpenThreats isInScope"
                }
              }
            },
            {
              "type": "tm.Flow",
              "smooth": true,
              "source": {
                "id": "c686565f-0cb5-4c40-846d-9703aed937ad"
              },
              "target": {
                "id": "c686565f-0cb5-4c40-846d-9703aed937ad"
              },
              "vertices": [
                {
                  "x": 761,
                  "y": 298
                },
                {
                  "x": 745,
                  "y": 340
                }
              ],
              "id": "2b97f271-361b-4ec8-a4c5-6adf7391051e",
              "labels": [
                {
                  "position": 0.5,
                  "attrs": {
                    "text": {
                      "text": "22. verifies grants",
                      "font-weight": "400",
                      "font-size": "small"
                    }
                  }
                }
              ],
              "z": 28,
              "hasOpenThreats": false,
              "attrs": {
                ".marker-target": {
                  "class": "marker-target hasNoOpenThreats isInScope"
                },
                ".connection": {
                  "class": "connection hasNoOpenThreats isInScope"
                }
              }
            },
            {
              "type": "tm.Flow",
              "smooth": true,
              "source": {
                "id": "79fd3586-ab8d-4df8-a923-8a99f1665994"
              },
              "target": {
                "id": "c686565f-0cb5-4c40-846d-9703aed937ad"
              },
              "vertices": [
                {
                  "x": 367,
                  "y": 743
                },
                {
                  "x": 657,
                  "y": 720
                },
                {
                  "x": 722,
                  "y": 510
                }
              ],
              "id": "24ab8104-15f5-41ad-a2b5-c8cf3fd36a36",
              "labels": [
                {
                  "position": {
                    "distance": 0.5228205530683787,
                    "offset": 17.724149748682976
                  },
                  "attrs": {
                    "text": {
                      "text": "21.redirect to url  w/\nconsent_verifier",
                      "font-weight": "400",
                      "font-size": "small"
                    }
                  }
                }
              ],
              "z": 29,
              "hasOpenThreats": false,
              "attrs": {
                ".marker-target": {
                  "class": "marker-target hasNoOpenThreats isInScope"
                },
                ".connection": {
                  "class": "connection hasNoOpenThreats isInScope"
                }
              }
            },
            {
              "type": "tm.Flow",
              "smooth": true,
              "source": {
                "id": "c686565f-0cb5-4c40-846d-9703aed937ad"
              },
              "target": {
                "id": "79fd3586-ab8d-4df8-a923-8a99f1665994"
              },
              "vertices": [
                {
                  "x": 693,
                  "y": 507
                },
                {
                  "x": 629,
                  "y": 706
                },
                {
                  "x": 372,
                  "y": 721
                }
              ],
              "id": "25d90fc7-afb0-4e75-8df0-17fea2bf1d80",
              "labels": [
                {
                  "position": 0.5,
                  "attrs": {
                    "text": {
                      "text": "20.return redirect url\nw/ consent verifier",
                      "font-weight": "400",
                      "font-size": "small"
                    }
                  }
                }
              ],
              "z": 30,
              "hasOpenThreats": false,
              "attrs": {
                ".marker-target": {
                  "class": "marker-target hasNoOpenThreats isInScope"
                },
                ".connection": {
                  "class": "connection hasNoOpenThreats isInScope"
                }
              }
            },
            {
              "type": "tm.Flow",
              "smooth": true,
              "source": {
                "id": "c686565f-0cb5-4c40-846d-9703aed937ad"
              },
              "target": {
                "id": "bb4de7b9-ffe5-4774-bc73-0591a6935f81"
              },
              "vertices": [
                {
                  "x": 541,
                  "y": 247
                },
                {
                  "x": 414,
                  "y": 200
                }
              ],
              "id": "06cecf82-63a2-404e-a572-156274ad8c54",
              "labels": [
                {
                  "position": 0.5,
                  "attrs": {
                    "text": {
                      "text": "25. return token",
                      "font-weight": "400",
                      "font-size": "small"
                    }
                  }
                }
              ],
              "z": 31,
              "hasOpenThreats": true,
              "threats": [
                {
                  "status": "Open",
                  "severity": "High",
                  "deinitionSource": "cwe",
                  "title": "Token Endpoint - Eavesdropping Access Tokens",
                  "type": "Authorize Actors",
                  "subtype": "300 - Channel Accessible by Non-Endpoint ('Man-in-the-Middle')",
                  "subCategorySummary": "The product does not adequately verify the identity of actors at both ends of a communication channel, or does not adequately ensure the integrity of the channel, in a way that allows the channel to be accessed or influenced by an actor that is not an endpoint.",
                  "attackPattern": "158 - Sniffing Network Traffic",
                  "attackPatternSummary": [
                    "In this attack pattern, the adversary monitors network traffic between nodes of a public or multicast network in an attempt to capture sensitive information at the protocol level. Network sniffing applications can reveal TCP/IP, DNS, Ethernet, and other low-level network communication information. The adversary takes a passive role in this attack pattern and simply observes and analyzes the traffic. The adversary may precipitate or indirectly influence the content of the observed transaction, but is never the intended recipient of the target information."
                  ],
                  "vulnerabilityRating": "8.1",
                  "description": "Attackers may attempt to eavesdrop access tokens in transit from the\nauthorization server to the client.\nImpact: The attacker is able to access all resources with the\npermissions covered by the scope of the particular access token.",
                  "mitigation": "Countermeasures:\no As per the core OAuth spec, the authorization servers must ensure\nthat these transmissions are protected using transport-layer\nmechanisms such as TLS.\no If end-to-end confidentiality cannot be guaranteed, reducing scope and expiry time for access\ntokens can be used to reduce the damage in case of leaks."
                },
                {
                  "status": "Open",
                  "severity": "High",
                  "deinitionSource": "cwe",
                  "title": "Eavesdropping Refresh Tokens from Authorization Server",
                  "type": "Authorize Actors",
                  "subtype": "300 - Channel Accessible by Non-Endpoint ('Man-in-the-Middle')",
                  "subCategorySummary": "The product does not adequately verify the identity of actors at both ends of a communication channel, or does not adequately ensure the integrity of the channel, in a way that allows the channel to be accessed or influenced by an actor that is not an endpoint.",
                  "attackPattern": "651 - Eavesdropping",
                  "attackPatternSummary": [
                    "An adversary intercepts a form of communication (e.g. text, audio, video) by way of software (e.g., microphone and audio recording application), hardware (e.g., recording equipment), or physical means (e.g., physical proximity). The goal of eavesdropping is typically to gain unauthorized access to sensitive information about the target for financial, personal, political, or other gains. Eavesdropping is different from a sniffing attack as it does not take place on a network-based communication channel (e.g., IP traffic). Instead, it entails listening in on the raw audio source of a conversation between two or more parties."
                  ],
                  "vulnerabilityRating": "8.1",
                  "description": "An attacker may eavesdrop refresh tokens when they are transmitted\nfrom the authorization server to the client.",
                  "mitigation": "Countermeasures:\no As per the core OAuth spec, the authorization servers must ensure that these transmissions are protected using transport-layer mechanisms such as TLS.\no If end-to-end confidentiality cannot be guaranteed, reducing scope and expiry time for\nissued access tokens can be used to reduce the damage in case of leaks."
                }
              ],
              "attrs": {
                ".marker-target": {
                  "class": "marker-target hasOpenThreats isInScope"
                },
                ".connection": {
                  "class": "connection hasOpenThreats isInScope"
                }
              }
            },
            {
              "type": "tm.Flow",
              "smooth": true,
              "source": {
                "id": "bb4de7b9-ffe5-4774-bc73-0591a6935f81"
              },
              "target": {
                "id": "c686565f-0cb5-4c40-846d-9703aed937ad"
              },
              "vertices": [
                {
                  "x": 406,
                  "y": 232
                },
                {
                  "x": 504,
                  "y": 256
                }
              ],
              "id": "cf757166-1a7b-4de7-ac52-37d6280a0a9d",
              "labels": [
                {
                  "position": 0.5,
                  "attrs": {
                    "text": {
                      "text": "24.exchange code for\ntoken",
                      "font-weight": "400",
                      "font-size": "small"
                    }
                  }
                }
              ],
              "z": 32,
              "hasOpenThreats": true,
              "threats": [
                {
                  "status": "Open",
                  "severity": "High",
                  "deinitionSource": "cwe",
                  "title": "Token Endpoint - Disclosure of Client Credentials during Transmission",
                  "type": "Authorize Actors",
                  "subtype": "300 - Channel Accessible by Non-Endpoint ('Man-in-the-Middle')",
                  "subCategorySummary": "The product does not adequately verify the identity of actors at both ends of a communication channel, or does not adequately ensure the integrity of the channel, in a way that allows the channel to be accessed or influenced by an actor that is not an endpoint.",
                  "vulnerabilityRating": "8.1",
                  "description": "An attacker could attempt to eavesdrop the transmission of client\ncredentials between the client and server during the client\nauthentication process or during OAuth token requests.\nImpact: Revelation of a client credential enabling phishing or\nimpersonation of a client service.",
                  "mitigation": "Countermeasures:\no The transmission of client credentials must be protected using\ntransport-layer mechanisms such as TLS.\no Use alternative authentication means that do not require the\nsending of plaintext credentials over the wire (e.g., Hash-based\nMessage Authentication Code).",
                  "attackPattern": "158 - Sniffing Network Traffic",
                  "attackPatternSummary": [
                    "In this attack pattern, the adversary monitors network traffic between nodes of a public or multicast network in an attempt to capture sensitive information at the protocol level. Network sniffing applications can reveal TCP/IP, DNS, Ethernet, and other low-level network communication information. The adversary takes a passive role in this attack pattern and simply observes and analyzes the traffic. The adversary may precipitate or indirectly influence the content of the observed transaction, but is never the intended recipient of the target information."
                  ]
                },
                {
                  "status": "Open",
                  "severity": "Medium",
                  "deinitionSource": "allcwe",
                  "title": "Authorization Code - DoS Attacks That Exhaust Resources",
                  "description": "If an authorization server includes a nontrivial amount of entropy in\nauthorization \"codes\" or access tokens (limiting the number of\npossible codes/tokens) and automatically grants either without user\nintervention and has no limit on codes or access tokens per user, an\nattacker could exhaust the pool of authorization \"codes\" by\nrepeatedly directing the user’s browser to request authorization\n\"codes\" or access tokens.",
                  "vulnerabilityRating": "6.7",
                  "type": "All",
                  "subtype": "400 - Uncontrolled Resource Consumption ('Resource Exhaustion')",
                  "subCategorySummary": "The software does not properly restrict the size or amount of resources that are requested or influenced by an actor, which can be used to consume more resources than intended.",
                  "attackPattern": "125 - Flooding",
                  "attackPatternSummary": [
                    "An adversary consumes the resources of a target by rapidly engaging in a large number of interactions with the target. This type of attack generally exposes a weakness in rate limiting or flow. When successful this attack prevents legitimate users from accessing the service and can cause the target to crash. This attack differs from resource depletion through leaks or allocations in that the latter attacks do not rely on the volume of requests made to the target but instead focus on manipulation of the target's operations. The key factor in a flooding attack is the number of requests the adversary can make in a given period of time. The greater this number, the more likely an attack is to succeed against a given target."
                  ],
                  "mitigation": "Countermeasures:\no The authorization server should consider limiting the number of\naccess tokens granted per user.\no The authorization server should include a nontrivial amount of\nentropy in authorization \"codes\"."
                },
                {
                  "status": "Open",
                  "severity": "Medium",
                  "deinitionSource": "allcwe",
                  "title": "Authorization Code - DoS Using Manufactured Authorization codes",
                  "type": "All",
                  "subtype": "400 - Uncontrolled Resource Consumption ('Resource Exhaustion')",
                  "subCategorySummary": "The software does not properly restrict the size or amount of resources that are requested or influenced by an actor, which can be used to consume more resources than intended.",
                  "attackPattern": "125 - Flooding",
                  "attackPatternSummary": [
                    "An adversary consumes the resources of a target by rapidly engaging in a large number of interactions with the target. This type of attack generally exposes a weakness in rate limiting or flow. When successful this attack prevents legitimate users from accessing the service and can cause the target to crash. This attack differs from resource depletion through leaks or allocations in that the latter attacks do not rely on the volume of requests made to the target but instead focus on manipulation of the target's operations. The key factor in a flooding attack is the number of requests the adversary can make in a given period of time. The greater this number, the more likely an attack is to succeed against a given target."
                  ],
                  "description": "An attacker who owns a botnet can locate the redirect URIs of clients\nthat listen on HTTP, access them with random authorization \"codes\",\nand cause a large number of HTTPS connections to be concentrated onto\nthe authorization server. This can result in a denial-of-service\n(DoS) attack on the authorization server.\nThis attack can still be effective even when CSRF defense/the \"state\"\nparameter is deployed on the client side. With\nsuch a defense, the attacker might need to incur an additional HTTP\nrequest to obtain a valid CSRF code/\"state\" parameter. This\napparently cuts down the effectiveness of the attack by a factor of\n2. However, if the HTTPS/HTTP cost ratio is higher than 2, the attacker\nstill achieves a magnification of resource utilization at the expense\nof the authorization server.\nImpact: There are a few effects that the attacker can accomplish with\nthis OAuth flow that they cannot easily achieve otherwise.\n1. Connection laundering: With the clients as the relay between the\nattacker and the authorization server, the authorization server\nlearns little or no information about the identity of the\nattacker. Defenses such as rate-limiting on the offending\nattacker machines are less effective because it is difficult to\nidentify the attacking machines. Although an attacker could also\nlaunder its connections through an anonymizing system such as\nTor, the effectiveness of that approach depends on the capacity\nof the anonymizing system. On the other hand, a potentially\nlarge number of OAuth clients could be utilized for this attack.\n2. Asymmetric resource utilization: The attacker incurs the cost of\nan HTTP connection and causes an HTTPS connection to be made on\nthe authorization server; the attacker can coordinate the timing\nof such HTTPS connections across multiple clients relatively\neasily. Although the attacker could achieve something similar,\nsay, by including an iFrame pointing to the HTTPS URL of the\nauthorization server in an HTTP web page and luring web users to\nvisit that page, timing attacks using such a scheme may be more difficult, as it seems nontrivial to synchronize a large number\nof users to simultaneously visit a particular site under the\nattacker’s control.",
                  "mitigation": "Countermeasures:\no Though not a complete countermeasure by themselves, CSRF defense\nand the \"state\" parameter created with secure random codes should\nbe deployed on the client side. The client should forward the\nauthorization \"code\" to the authorization server only after both\nthe CSRF token and the \"state\" parameter are validated.\no If the client authenticates the user, either through a singlesign-\non protocol or through local authentication, the client\nshould suspend the access by a user account if the number of\ninvalid authorization \"codes\" submitted by this user exceeds a\ncertain threshold.\no The authorization server should send an error response to the\nclient reporting an invalid authorization \"code\" and rate-limit or\ndisallow connections from clients whose number of invalid requests\nexceeds a threshold.",
                  "vulnerabilityRating": "6.8"
                },
                {
                  "status": "Open",
                  "severity": "High",
                  "deinitionSource": "cwe",
                  "title": "Refresh Token Phishing by Counterfeit Authorization Server",
                  "type": "Validate Inputs",
                  "subtype": "601 - URL Redirection to Untrusted Site ('Open Redirect')",
                  "subCategorySummary": "A web application accepts a user-controlled input that specifies a link to an external site, and uses that link in a Redirect. This simplifies phishing attacks.",
                  "attackPattern": "98 - Phishing",
                  "attackPatternSummary": [
                    "Phishing is a social engineering technique where an attacker masquerades as a legitimate entity with which the victim might do business in order to prompt the user to reveal some confidential information (very frequently authentication credentials) that can later be used by an attacker. Phishing is essentially a form of information gathering or \"fishing\" for information."
                  ],
                  "vulnerabilityRating": "8.2",
                  "description": "An attacker could try to obtain valid refresh tokens by proxying\nrequests to the authorization server. Given the assumption that the\nauthorization server URL is well-known at development time or can at\nleast be obtained from a well-known resource server, the attacker\nmust utilize some kind of spoofing in order to succeed.",
                  "mitigation": "Countermeasures:\no Utilize server authentication"
                }
              ],
              "attrs": {
                ".marker-target": {
                  "class": "marker-target hasOpenThreats isInScope"
                },
                ".connection": {
                  "class": "connection hasOpenThreats isInScope"
                }
              }
            },
            {
              "type": "tm.Boundary",
              "smooth": true,
              "source": {
                "x": 250,
                "y": 7
              },
              "target": {
                "x": 676,
                "y": 6
              },
              "vertices": [
                {
                  "x": 457,
                  "y": 132
                }
              ],
              "id": "127ca99c-a820-4ce3-b878-94fd1e5550d0",
              "z": 33,
              "attrs": {}
            },
            {
              "type": "tm.Boundary",
              "smooth": true,
              "source": {
                "x": 210,
                "y": 125
              },
              "target": {
                "x": 128,
                "y": 365
              },
              "vertices": [
                {
                  "x": 224,
                  "y": 250
                }
              ],
              "id": "fb9f1fde-5dce-4ba2-8914-d217f6b01e19",
              "z": 34,
              "attrs": {}
            },
            {
              "type": "tm.Process",
              "size": {
                "width": 100,
                "height": 100
              },
              "position": {
                "x": 661,
                "y": 51
              },
              "angle": 0,
              "id": "eb7bdd97-79eb-4870-8fe2-c069a94c3882",
              "z": 35,
              "hasOpenThreats": true,
              "threats": [
                {
                  "status": "Open",
                  "severity": "High",
                  "deinitionSource": "allcwe",
                  "title": "Protected Resources - Replay of Authorized Resource Server Requests",
                  "type": "All",
                  "subtype": "294 - Authentication Bypass by Capture-replay",
                  "subCategorySummary": "A capture-replay flaw exists when the design of the software makes it possible for a malicious user to sniff network traffic and bypass authentication by replaying it to the server in question to the same effect as the original message (or with minor changes).",
                  "attackPattern": "158 - Sniffing Network Traffic",
                  "attackPatternSummary": [
                    "In this attack pattern, the adversary monitors network traffic between nodes of a public or multicast network in an attempt to capture sensitive information at the protocol level. Network sniffing applications can reveal TCP/IP, DNS, Ethernet, and other low-level network communication information. The adversary takes a passive role in this attack pattern and simply observes and analyzes the traffic. The adversary may precipitate or indirectly influence the content of the observed transaction, but is never the intended recipient of the target information."
                  ],
                  "vulnerabilityRating": "8.2",
                  "description": "An attacker could attempt to replay valid requests in order to obtain\nor to modify/destroy user data.",
                  "mitigation": "Countermeasures:\no The resource server should utilize transport security measures\n(e.g., TLS) in order to prevent such attacks.\nThis would prevent the attacker from capturing valid requests.\no Alternatively, the resource server could employ signed requests  along with nonces and timestamps in order to\nuniquely identify requests. The resource server should detect and\nrefuse every replayed request."
                },
                {
                  "status": "Open",
                  "severity": "High",
                  "deinitionSource": "other",
                  "title": "Protected Resources - Guessing Access Tokens",
                  "type": "Guess handle token based on prior knowledge",
                  "vulnerabilityRating": "8.5",
                  "description": "Where the token is a handle, the attacker may attempt to guess the\naccess token values based on knowledge they have from other access\ntokens.\nImpact: Access to a single user’s detail",
                  "mitigation": "Countermeasures:\no Handle tokens should have a reasonable level of entropy in order to make guessing a valid token value not feasible.\no Assertion (or self-contained token) token contents should be\nprotected by a digital signature.\no Security can be further strengthened by using a short access token\nduration"
                },
                {
                  "status": "Open",
                  "severity": "Medium",
                  "deinitionSource": "other",
                  "title": "Protected Resources - Abuse of Token by Legitimate Resource Server or Client",
                  "type": "Abuse of Token by Legitimate Party",
                  "vulnerabilityRating": "6.6",
                  "description": "A legitimate resource server could attempt to use an access token to\naccess another resource server. Similarly, a client could try to use\na token obtained for one server on another resource server.",
                  "mitigation": "Countermeasures:\no Tokens should be restricted to particular resource servers"
                },
                {
                  "status": "Open",
                  "severity": "High",
                  "deinitionSource": "cwe",
                  "title": "Protected Resources - Token Leakage via Log Files and HTTP Referrers",
                  "description": "If access tokens are sent via URI query parameters, such tokens may\nleak to log files and the HTTP \"referer\".",
                  "vulnerabilityRating": "8.7",
                  "mitigation": "Countermeasures:\no Use Authorization headers or POST parameters instead of URI request parameters.\no Set logging configuration appropriately.\no Prevent unauthorized persons from access to system log files.\no Abuse of leaked access tokens can be prevented by enforcing\nauthenticated requests.\no The impact of token leakage may be reduced by limiting scope and duration and by enforcing one-time token usage",
                  "type": "Audit",
                  "subtype": "532 - Information Exposure Through Log Files",
                  "subCategorySummary": "Information written to log files can be of a sensitive nature and give valuable guidance to an attacker or expose sensitive user information."
                }
              ],
              "attrs": {
                ".element-shape": {
                  "class": "element-shape hasOpenThreats isInScope"
                },
                "text": {
                  "text": "Resource\nServer"
                },
                ".element-text": {
                  "class": "element-text hasOpenThreats isInScope"
                }
              }
            },
            {
              "type": "tm.Flow",
              "smooth": true,
              "source": {
                "id": "bb4de7b9-ffe5-4774-bc73-0591a6935f81"
              },
              "target": {
                "id": "eb7bdd97-79eb-4870-8fe2-c069a94c3882"
              },
              "vertices": [
                {
                  "x": 456,
                  "y": 156
                }
              ],
              "id": "e74c7418-8922-4605-9ffa-d841467323c6",
              "labels": [
                {
                  "position": {
                    "distance": 0.828679517016239,
                    "offset": 14.017321746330708
                  },
                  "attrs": {
                    "text": {
                      "text": "26. request for\nresource with token",
                      "font-weight": "400",
                      "font-size": "small"
                    }
                  }
                }
              ],
              "z": 36,
              "hasOpenThreats": true,
              "threats": [
                {
                  "status": "Open",
                  "severity": "High",
                  "deinitionSource": "cwe",
                  "title": "Protected Resources - Eavesdropping Access Tokens on Transport",
                  "type": "Authorize Actors",
                  "subtype": "300 - Channel Accessible by Non-Endpoint ('Man-in-the-Middle')",
                  "subCategorySummary": "The product does not adequately verify the identity of actors at both ends of a communication channel, or does not adequately ensure the integrity of the channel, in a way that allows the channel to be accessed or influenced by an actor that is not an endpoint.",
                  "attackPattern": "651 - Eavesdropping",
                  "attackPatternSummary": [
                    "An adversary intercepts a form of communication (e.g. text, audio, video) by way of software (e.g., microphone and audio recording application), hardware (e.g., recording equipment), or physical means (e.g., physical proximity). The goal of eavesdropping is typically to gain unauthorized access to sensitive information about the target for financial, personal, political, or other gains. Eavesdropping is different from a sniffing attack as it does not take place on a network-based communication channel (e.g., IP traffic). Instead, it entails listening in on the raw audio source of a conversation between two or more parties."
                  ],
                  "vulnerabilityRating": "8.5",
                  "description": "An attacker could try to obtain a valid access token on transport between the client and resource server. As access tokens are shared secrets between the authorization server and resource server, they should be treated with the same care as other credentials (e.g., end user passwords)",
                  "mitigation": "Countermeasures:\no Access tokens sent as bearer tokens should not be sent in the\nclear over an insecure channel. As per the core OAuth spec,\ntransmission of access tokens must be protected using transportlayer\nmechanisms such as TLS.\no A short lifetime reduces impact in case tokens are compromised.\no The access token can be bound to a client’s identifier and require\nthe client to prove legitimate ownership of the token to the\nresource server"
                },
                {
                  "status": "Open",
                  "severity": "High",
                  "deinitionSource": "allcwe",
                  "title": "Protected Resources - Access Token Phishing by Counterfeit Resource Server",
                  "description": "An attacker may pretend to be a particular resource server and to\naccept tokens from a particular authorization server. If the client\nsends a valid access token to this counterfeit resource server, the\nserver in turn may use that token to access other services on behalf\nof the resource owner.",
                  "mitigation": "Countermeasures:\no Clients should not make authenticated requests with an access\ntoken to unfamiliar resource servers, regardless of the presence\nof a secure channel. If the resource server URL is well-known to\nthe client, it may authenticate the resource servers.\no Associate the endpoint URL of the resource server the client\ntalked to with the access token (e.g., in an audience field) and\nvalidate the association at a legitimate resource server. The\nendpoint URL validation policy may be strict (exact match) or more\nrelaxed (e.g., same host). This would require telling the\nauthorization server about the resource server endpoint URL in the\nauthorization process.\no Associate an access token with a client and authenticate the\nclient with resource server requests (typically via a signature,\nin order to not disclose a secret to a potential attacker). This\nprevents the attack because the counterfeit server is assumed to\nlack the capability to correctly authenticate on behalf of the\nlegitimate client to the resource server.\no Restrict the token scope and/or limit the token to a certain resource server",
                  "vulnerabilityRating": "8.5",
                  "type": "All",
                  "subtype": "601 - URL Redirection to Untrusted Site ('Open Redirect')",
                  "subCategorySummary": "A web application accepts a user-controlled input that specifies a link to an external site, and uses that link in a Redirect. This simplifies phishing attacks.",
                  "attackPattern": "98 - Phishing",
                  "attackPatternSummary": [
                    "Phishing is a social engineering technique where an attacker masquerades as a legitimate entity with which the victim might do business in order to prompt the user to reveal some confidential information (very frequently authentication credentials) that can later be used by an attacker. Phishing is essentially a form of information gathering or \"fishing\" for information."
                  ]
                }
              ],
              "attrs": {
                ".marker-target": {
                  "class": "marker-target hasOpenThreats isInScope"
                },
                ".connection": {
                  "class": "connection hasOpenThreats isInScope"
                }
              }
            },
            {
              "type": "tm.Boundary",
              "smooth": true,
              "source": {
                "x": 696,
                "y": 19
              },
              "target": {
                "x": 744,
                "y": 184
              },
              "vertices": [
                {
                  "x": 628,
                  "y": 128
                }
              ],
              "id": "824c0233-3ec3-4d84-8453-2c38726dac09",
              "z": 37,
              "attrs": {}
            }
          ]
        },
        "size": {
          "height": 775.454345703125,
          "width": 3473.139404296875
        }
      },
      {
        "title": "native-app-login_IssueToken",
        "thumbnail": "./public/content/images/thumbnail.jpg",
        "id": 1,
        "diagramJson": {
          "cells": [
            {
              "type": "tm.Actor",
              "size": {
                "width": 160,
                "height": 80
              },
              "position": {
                "x": 220,
                "y": 17
              },
              "angle": 0,
              "id": "597e98f1-00e2-478c-9aac-bce10d4e061a",
              "z": 1,
              "hasOpenThreats": false,
              "attrs": {
                ".element-shape": {
                  "class": "element-shape hasNoOpenThreats isInScope"
                },
                "text": {
                  "text": "User"
                },
                ".element-text": {
                  "class": "element-text hasNoOpenThreats isInScope"
                }
              }
            },
            {
              "type": "tm.Process",
              "size": {
                "width": 100,
                "height": 100
              },
              "position": {
                "x": 35,
                "y": 237
              },
              "angle": 0,
              "id": "72e504d3-7374-4488-a70d-dfa20fc27edc",
              "z": 2,
              "hasOpenThreats": true,
              "threats": [
                {
                  "status": "Open",
                  "severity": "Medium",
                  "deinitionSource": "owasp",
                  "title": "Client - Obtaining client secret from source code or Binary",
                  "type": "OWASP Top Ten 2017 Category A3 - Sensitive Data Exposure",
                  "subtype": "312 - Cleartext Storage of Sensitive Information",
                  "subCategorySummary": "The application stores sensitive information in cleartext within a resource that might be accessible to another control sphere.",
                  "attackPattern": "188 - Reverse Engineering",
                  "attackPatternSummary": [
                    "An adversary discovers the structure, function, and composition of an object, resource, or system by using a variety of analysis techniques to effectively determine how the analyzed entity was constructed or operates. The goal of reverse engineering is often to duplicate the function, or a part of the function, of an object in order to duplicate or \"back engineer\" some aspect of its functioning. Reverse engineering techniques can be applied to mechanical objects, electronic devices, or software, although the methodology and techniques involved in each type of analysis differ widely."
                  ],
                  "vulnerabilityRating": "6.8",
                  "description": "This applies for all client types. For open source projects, secrets\n can be extracted directly from source code in their public\n repositories. Secrets can be extracted from application binaries\n just as easily when the published source is not available to the\n attacker. Even if an application takes significant measures to\n obfuscate secrets in their application distribution, one should\n consider that the secret can still be reverse-engineered by anyone\n with access to a complete functioning application bundle or binary.",
                  "mitigation": "Countermeasures:\n o Don’t issue secrets to public clients or clients with\n inappropriate security policy.\n o Require user consent for public clients.\n o Use deployment-specific client secrets.\n o Revoke client secrets."
                },
                {
                  "status": "Open",
                  "severity": "Medium",
                  "deinitionSource": "other",
                  "title": "Client - Obtain a Deployment-Specific Secret",
                  "type": "An attacker may try to obtain the secret from a client installation.",
                  "attackPattern": "116 - Excavation",
                  "attackPatternSummary": [
                    "An adversary actively probes the target in a manner that is designed to solicit information that could be leveraged for malicious purposes. This is achieved by exploring the target via ordinary interactions for the purpose of gathering intelligence about the target, or by sending data that is syntactically invalid or non-standard in an attempt to produce a response that contains the desired data. As a result of these interactions, the adversary is able to obtain information from the target that aids the attacker in making inferences about its security, configuration, or potential vulnerabilities. Examplar exchanges with the target may trigger unhandled exceptions or verbose error messages that reveal information like stack traces, configuration information, path information, or database design. This type of attack also includes the manipulation of query strings in a URI to produce invalid SQL queries, or by trying alternative path values in the hope that the server will return useful information."
                  ],
                  "vulnerabilityRating": "6.8",
                  "description": "An attacker may try to obtain the secret from a client installation,\neither from a web site (web server) or a particular device (native\napplication)",
                  "mitigation": "Plan--------\n1. Web server: Apply standard web server protection measures (for\nconfig files and databases)\n2. Native applications: Store secrets in secure local storage\n3. Revoke client secrets"
                },
                {
                  "status": "Open",
                  "severity": "Medium",
                  "deinitionSource": "cwe",
                  "title": "Client - Obtain Refresh Token from Native Clients",
                  "type": "Authorize Actors",
                  "subtype": "538 - File and Directory Information Exposure",
                  "subCategorySummary": "The product stores sensitive information in files or directories that are accessible to actors outside of the intended control sphere.",
                  "description": "On native clients, leakage of a refresh token typically affects a\nsingle user only.\nRead from local file system: The attacker could try to get file\nsystem access on the device and read the refresh tokens. The\nattacker could utilize a malicious application for that purpose.",
                  "vulnerabilityRating": "6.8",
                  "mitigation": "Countermeasures:\no Store secrets in secure storage.\no Utilize device lock to prevent unauthorized device access"
                },
                {
                  "status": "Open",
                  "severity": "Medium",
                  "deinitionSource": "other",
                  "title": "Client - Steal Device",
                  "type": "Steal device",
                  "attackPattern": "507 - Physical Theft",
                  "attackPatternSummary": [
                    "An adversary gains physical access to a system or device through theft of the item. Possession of a system or device enables a number of unique attacks to be executed and often provides the adversary with an extended timeframe for which to perform an attack. Most protections put in place to secure sensitive information can be defeated when an adversary has physical access and enough time."
                  ],
                  "description": "The host device (e.g., mobile phone) may be stolen. In that case,\nthe attacker gets access to all applications under the identity of\nthe legitimate user.",
                  "vulnerabilityRating": "6.8",
                  "mitigation": "Countermeasures:\no Utilize device lock to prevent unauthorized device access.\no Where a user knows the device has been stolen, they can revoke the\naffected tokens"
                },
                {
                  "status": "Open",
                  "severity": "Medium",
                  "deinitionSource": "other",
                  "title": "Client - Clone Device",
                  "type": "Clone device",
                  "vulnerabilityRating": "6.8",
                  "description": "All device data and applications are copied to another device.\nApplications are used as-is on the target device.",
                  "mitigation": "Countermeasures:\no Utilize device lock to prevent unauthorized device access\no Combine refresh token request with device identification\no Refresh token rotation\no Where a user knows the device has been cloned, they can use\nrefresh token revocation"
                },
                {
                  "status": "Open",
                  "severity": "Critical",
                  "deinitionSource": "allcwe",
                  "title": "Client - Obtaining Access Token",
                  "type": "All",
                  "subtype": "922 - Insecure Storage of Sensitive Information",
                  "subCategorySummary": "The software stores sensitive information without properly limiting read or write access by unauthorized actors.",
                  "description": "Access tokens could be stolen\nfrom the device if the application stores them in a storage device\nthat is accessible to other applications.\nImpact: Where the token is a bearer token and no additional mechanism\nis used to identify the client, the attacker can access all resources\nassociated with the token and its scope.",
                  "mitigation": "Countermeasures:\no Keep access tokens in transient memory and limit grants.\no Limit token scope.\no Keep access tokens in private memory or apply same protection\nmeans as for refresh tokens.\no Keep access token lifetime short.",
                  "vulnerabilityRating": "9.5"
                },
                {
                  "status": "Open",
                  "severity": "High",
                  "deinitionSource": "cwe",
                  "title": "Open Redirectors on Client",
                  "type": "Validate Inputs",
                  "subtype": "601 - URL Redirection to Untrusted Site ('Open Redirect')",
                  "subCategorySummary": "A web application accepts a user-controlled input that specifies a link to an external site, and uses that link in a Redirect. This simplifies phishing attacks.",
                  "description": "An open redirector is an endpoint using a parameter to automatically\nredirect a user agent to the location specified by the parameter\nvalue without any validation. If the authorization server allows the\nclient to register only part of the redirect URI, an attacker can use\nan open redirector operated by the client to construct a redirect URI\nthat will pass the authorization server validation but will send the\nauthorization \"code\" or access token to an endpoint under the control\nof the attacker.\nImpact: An attacker could gain access to authorization \"codes\" or\naccess tokens.",
                  "vulnerabilityRating": "8.7",
                  "mitigation": "Countermeasures:\no Require clients to register full redirect URI"
                },
                {
                  "status": "Open",
                  "severity": "Critical",
                  "deinitionSource": "cwe",
                  "title": "Resource Owner-s Password Grant: Client Obtains Scopes without End-User Authorization",
                  "type": "Authorize Actors",
                  "subtype": "285 - Improper Authorization",
                  "subCategorySummary": "The software does not perform or incorrectly performs an authorization check when an actor attempts to access a resource or perform an action.",
                  "attackPattern": "22 - Exploiting Trust in Client",
                  "attackPatternSummary": [
                    "An attack of this type exploits vulnerabilities in client/server communication channel authentication and data integrity. It leverages the implicit trust a server places in the client, or more importantly, that which the server believes is the client. An attacker executes this type of attack by placing themselves in the communication channel between client and server such that communication directly to the server is possible where the server believes it is communicating only with a valid client. There are numerous variations of this type of attack."
                  ],
                  "vulnerabilityRating": "9.0",
                  "description": "All interaction with the resource owner is performed by the client.\nThus it might, intentionally or unintentionally, happen that the\nclient obtains a token with scope unknown for, or unintended by, the\nresource owner. For example, the resource owner might think the\nclient needs and acquires read-only access to its media storage only\nbut the client tries to acquire an access token with full access\npermissions.",
                  "mitigation": "Countermeasures:\no Use other flows that do not rely on the client’s cooperation for\nresource owner interaction.\no The authorization server may generally restrict the scope of\naccess tokens issued by this flow. If the particular client is trustworthy and can be authenticated in a reliable way, the authorization server could relax that restriction. Resource owners may prescribe (e.g., in their preferences) what the maximum scope is for clients using this flow.\no The authorization server could notify the resource owner by an\nappropriate medium, e.g., email, of the grant issued"
                },
                {
                  "status": "Open",
                  "severity": "Critical",
                  "deinitionSource": "cwe",
                  "title": "Resource Owner-s Password Grant: Accidental Exposure of Passwords at Client Site",
                  "type": "Encrypt Data",
                  "subtype": "319 - Cleartext Transmission of Sensitive Information",
                  "subCategorySummary": "The software transmits sensitive or security-critical data in cleartext in a communication channel that can be sniffed by unauthorized actors.",
                  "attackPattern": "37 - Retrieve Embedded Sensitive Data",
                  "attackPatternSummary": [
                    "An attacker examines a target system to find sensitive data that has been embedded within it. This information can reveal confidential contents, such as account numbers or individual keys/credentials that can be used as an intermediate step in a larger attack."
                  ],
                  "vulnerabilityRating": "9.2",
                  "description": "If the client does not provide enough protection, an attacker or\ndisgruntled employee could retrieve the passwords for a user.",
                  "mitigation": "Countermeasures:\no Use other flows that do not rely on the client’s cooperation for\nsecure resource owner credential handling.\no Use digest authentication instead of plaintext credential processing.\no Obfuscate passwords in logs."
                },
                {
                  "status": "Open",
                  "severity": "High",
                  "deinitionSource": "cwe",
                  "title": "Resource Owner-s Password Grant: Client Obtains Refresh Token through Automatic Authorization",
                  "type": "Authorize Actors",
                  "subtype": "266 - Incorrect Privilege Assignment",
                  "subCategorySummary": "A product incorrectly assigns a privilege to a particular actor, creating an unintended sphere of control for that actor.",
                  "attackPattern": "22 - Exploiting Trust in Client",
                  "attackPatternSummary": [
                    "An attack of this type exploits vulnerabilities in client/server communication channel authentication and data integrity. It leverages the implicit trust a server places in the client, or more importantly, that which the server believes is the client. An attacker executes this type of attack by placing themselves in the communication channel between client and server such that communication directly to the server is possible where the server believes it is communicating only with a valid client. There are numerous variations of this type of attack."
                  ],
                  "vulnerabilityRating": "8.1",
                  "description": "All interaction with the resource owner is performed by the client.\nThus it might, intentionally or unintentionally, happen that the\nclient obtains a long-term authorization represented by a refresh\ntoken even if the resource owner did not intend so.",
                  "mitigation": "Countermeasures:\no Use other flows that do not rely on the client’s cooperation for\nresource owner interaction.\no The authorization server may generally refuse to issue refresh\ntokens in this flow.  If the particular\nclient is trustworthy and can be authenticated in a reliable way, the authorization server could relax that restriction. Resource owners may allow or deny (e.g., in\ntheir preferences) the issuing of refresh tokens using this flow\nas well.\no The authorization server could notify the resource owner by an\nappropriate medium, e.g., email, of the refresh token issued"
                }
              ],
              "attrs": {
                ".element-shape": {
                  "class": "element-shape hasOpenThreats isInScope"
                },
                "text": {
                  "text": "Native App"
                },
                ".element-text": {
                  "class": "element-text hasOpenThreats isInScope"
                }
              }
            },
            {
              "type": "tm.Process",
              "size": {
                "width": 100,
                "height": 100
              },
              "position": {
                "x": 496,
                "y": 147
              },
              "angle": 0,
              "id": "adbb6f55-4b48-4a36-87d1-7f68e4a7b915",
              "z": 3,
              "hasOpenThreats": true,
              "threats": [
                {
                  "status": "Open",
                  "severity": "High",
                  "deinitionSource": "cwe",
                  "title": "Authorization Endpoint - Malicious Client Obtains Existing Authorization by Fraud",
                  "type": "Authorize Actors",
                  "subtype": "863 - Incorrect Authorization",
                  "subCategorySummary": "The software performs an authorization check when an actor attempts to access a resource or perform an action, but it does not correctly perform the check. This allows attackers to bypass intended access restrictions.",
                  "attackPattern": "151 - Identity Spoofing",
                  "attackPatternSummary": [
                    "Identity Spoofing refers to the action of assuming (i.e., taking on) the identity of some other entity (human or non-human) and then using that identity to accomplish a goal. An adversary may craft messages that appear to come from a different principle or use stolen / spoofed authentication credentials. Alternatively, an adversary may intercept a message from a legitimate sender and attempt to make it look like the message comes from them without changing its content. The latter form of this attack can be used to hijack credentials from legitimate users. Identity Spoofing attacks need not be limited to transmitted messages - any resource that is associated with an identity (for example, a file with a signature) can be the target of an attack where the adversary attempts to change the apparent identity. This attack differs from Content Spoofing attacks where the adversary does not wish to change the apparent identity of the message but instead wishes to change what the message says. In an Identity Spoofing attack, the adversary is attempting to change the identity of the content."
                  ],
                  "vulnerabilityRating": "8.4",
                  "description": "Authorization servers may wish to automatically process authorization\nrequests from clients that have been previously authorized by the\nuser. When the user is redirected to the authorization server’s enduser\nauthorization endpoint to grant access, the authorization server\ndetects that the user has already granted access to that particular\nclient. Instead of prompting the user for approval, the\nauthorization server automatically redirects the user back to the\nclient.\nA malicious client may exploit that feature and try to obtain such an\nauthorization \"code\" instead of the legitimate client.",
                  "mitigation": "Countermeasures:\no Authorization servers should not automatically process repeat\nauthorizations to public clients unless the client is validated\nusing a pre-registered redirect URI.\no Authorization servers can mitigate the risks associated with\nautomatic processing by limiting the scope of access tokens\nobtained through automated approvals."
                },
                {
                  "status": "Open",
                  "severity": "High",
                  "deinitionSource": "cwe",
                  "title": "Authorization Endpoint - Open Redirector",
                  "type": "Validate Inputs",
                  "subtype": "601 - URL Redirection to Untrusted Site ('Open Redirect')",
                  "subCategorySummary": "A web application accepts a user-controlled input that specifies a link to an external site, and uses that link in a Redirect. This simplifies phishing attacks.",
                  "vulnerabilityRating": "8.7",
                  "description": "An attacker could use the end-user authorization endpoint and the\nredirect URI parameter to abuse the authorization server as an open\nredirector. An open redirector is an endpoint using a parameter to\nautomatically redirect a user agent to the location specified by the\nparameter value without any validation.\nImpact: An attacker could utilize a user’s trust in an authorization\nserver to launch a phishing attack.",
                  "mitigation": "Countermeasures:\no Require clients to register any full redirect URIs\no Don’t redirect to a redirect URI if the client identifier or\nredirect URI can’t be verified"
                },
                {
                  "status": "Open",
                  "severity": "Medium",
                  "deinitionSource": "cwe",
                  "title": "Token Endpoint - Obtaining Access Tokens and client id & secret from Authorization Server Database - SQL Injection",
                  "type": "Validate Inputs",
                  "subtype": "75 - Failure to Sanitize Special Elements into a Different Plane (Special Element Injection)",
                  "subCategorySummary": "The software does not adequately filter user-controlled input for special elements with control implications.",
                  "attackPattern": "66 - SQL Injection",
                  "attackPatternSummary": [
                    "This attack exploits target software that constructs SQL statements based on user input. An attacker crafts input strings so that when the target software constructs SQL statements based on the input, the resulting SQL statement performs actions other than those the application intended. SQL Injection results from failure of the application to appropriately validate input. When specially crafted user-controlled input consisting of SQL syntax is used without proper validation as part of SQL queries, it is possible to glean information from the database in ways not envisaged during application design. Depending upon the database and the design of the application, it may also be possible to leverage injection to have the database execute system-related commands of the attackers' choice. SQL Injection enables an attacker to talk directly to the database, thus bypassing the application completely. Successful injection can cause information disclosure as well as ability to add or modify data in the database. In order to successfully inject SQL and retrieve information from a database, an attacker:"
                  ],
                  "vulnerabilityRating": "6.8",
                  "description": "This threat is applicable if the authorization server stores access\ntokens as handles in a database. An attacker may obtain access\ntokens or client secret from the authorization server’s database by launching a SQL injection attack.\n\nImpact: \nDisclosure of all access tokens.\nDisclosure of all client_id/secret combinations. This allows the attacker to act on behalf of legitimate clients.",
                  "mitigation": "Countermeasures:\no Enforce standard SQL injection countermeasures"
                },
                {
                  "status": "Open",
                  "severity": "Medium",
                  "deinitionSource": "owasp",
                  "title": "Token Endpoint - Obtaining Access Tokens and Client Id & Secrets from Authorization Server Database - Unsecured Access",
                  "type": "OWASP Top Ten 2017 Category A5 - Broken Access Control",
                  "subtype": "284 - Improper Access Control",
                  "subCategorySummary": "The software does not restrict or incorrectly restricts access to a resource from an unauthorized actor.",
                  "attackPattern": "115 - Authentication Bypass",
                  "attackPatternSummary": [
                    "An attacker gains access to application, service, or device with the privileges of an authorized or privileged user by evading or circumventing an authentication mechanism. The attacker is therefore able to access protected data without authentication ever having taken place. This refers to an attacker gaining access equivalent to an authenticated user without ever going through an authentication procedure. This is usually the result of the attacker using an unexpected access procedure that does not go through the proper checkpoints where authentication should occur. For example, a web site might assume that all users will click through a given link in order to get to secure material and simply authenticate everyone that clicks the link. However, an attacker might be able to reach secured web content by explicitly entering the path to the content rather than clicking through the authentication link, thereby avoiding the check entirely. This attack pattern differs from other authentication attacks in that attacks of this pattern avoid authentication entirely, rather than faking authentication by exploiting flaws or by stealing credentials from legitimate users."
                  ],
                  "vulnerabilityRating": "6.9",
                  "description": "For Access Token - This threat is applicable if the authorization server stores access tokens as handles in a database. An attacker may obtain access\ntokens from the authorization server’s database by gaining access to\nthe database\n\nFor Client Secret - An attacker may obtain valid client_id/secret combinations from the authorization server’s database by gaining access to the database.\n\nImpact: \nDisclosure of all access tokens.\nDisclosure of all client_id/secret combinations. This allows the attacker to act on behalf of legitimate clients.",
                  "mitigation": "Countermeasures:\no Enforce system security measures\no Store access token hashes only or Enforce Credential Storage Protection Best Practices"
                },
                {
                  "status": "Open",
                  "severity": "High",
                  "deinitionSource": "other",
                  "title": "Token Endpoint - Obtaining Client Secret by Online Guessing",
                  "type": "Attacker may try to guess valid client_id/secret pairs",
                  "attackPattern": "112 - Brute Force",
                  "attackPatternSummary": [
                    "In this attack, some asset (information, functionality, identity, etc.) is protected by a finite secret value. The attacker attempts to gain access to this asset by using trial-and-error to exhaustively explore all the possible secret values in the hope of finding the secret (or a value that is functionally equivalent) that will unlock the asset. Examples of secrets can include, but are not limited to, passwords, encryption keys, database lookup keys, and initial values to one-way functions. The key factor in this attack is the attackers' ability to explore the possible secret space rapidly. This, in turn, is a function of the size of the secret space and the computational power the attacker is able to bring to bear on the problem. If the attacker has modest resources and the secret space is large, the challenge facing the attacker is intractable. While the defender cannot control the resources available to an attacker, they can control the size of the secret space. Creating a large secret space involves selecting one's secret from as large a field of equally likely alternative secrets as possible and ensuring that an attacker is unable to reduce the size of this field using available clues or cryptanalysis. Doing this is more difficult than it sounds since elimination of patterns (which, in turn, would provide an attacker clues that would help them reduce the space of potential secrets) is difficult to do using deterministic machines, such as computers. Assuming a finite secret space, a brute force attack will eventually succeed. The defender must rely on making sure that the time and resources necessary to do so will exceed the value of the information. For example, a secret space that will likely take hundreds of years to explore is likely safe from raw-brute force attacks."
                  ],
                  "description": "An attacker may try to guess valid client_id/secret pairs.\nImpact: Disclosure of a single client_id/secret pair.",
                  "mitigation": "Countermeasures:\no Use high entropy for secrets.\no Lock accounts.\no Use strong client authentication.",
                  "vulnerabilityRating": "8.4"
                },
                {
                  "status": "Open",
                  "severity": "High",
                  "deinitionSource": "owasp",
                  "title": "Refresh Token - Obtaining Refresh Token from Authorization Server Database - ByPass Access",
                  "type": "OWASP Top Ten 2017 Category A5 - Broken Access Control",
                  "subtype": "284 - Improper Access Control",
                  "subCategorySummary": "The software does not restrict or incorrectly restricts access to a resource from an unauthorized actor.",
                  "attackPattern": "180 - Exploiting Incorrectly Configured Access Control Security Levels",
                  "attackPatternSummary": [
                    "An attacker exploits a weakness in the configuration of access controls and is able to bypass the intended protection that these measures guard against and thereby obtain unauthorized access to the system or network. Sensitive functionality should always be protected with access controls. However configuring all but the most trivial access control systems can be very complicated and there are many opportunities for mistakes. If an attacker can learn of incorrectly configured access security settings, they may be able to exploit this in an attack. Most commonly, attackers would take advantage of controls that provided too little protection for sensitive activities in order to perform actions that should be denied to them. In some circumstances, an attacker may be able to take advantage of overly restrictive access control policies, initiating denial of services (if an application locks because it unexpectedly failed to be granted access) or causing other legitimate actions to fail due to security. The latter class of attacks, however, is usually less severe and easier to detect than attacks based on inadequate security restrictions. This attack pattern differs from CAPEC 1, \"Accessing Functionality Not Properly Constrained by ACLs\" in that the latter describes attacks where sensitive functionality lacks access controls, where, in this pattern, the access control is present, but incorrectly configured."
                  ],
                  "vulnerabilityRating": "8.1",
                  "description": "This threat is applicable if the authorization server stores refresh tokens as handles in a database. An attacker may obtain refresh tokens from the authorization server’s database by gaining access to the database\n\nImpact: Disclosure of all refresh tokens.",
                  "mitigation": "Countermeasures:\no Enforce credential storage protection best practices.\no Bind token to client id, if the attacker cannot obtain the\nrequired id and secret"
                },
                {
                  "status": "Open",
                  "severity": "High",
                  "deinitionSource": "cwe",
                  "title": "Refresh Token - Obtaining Refresh Token from Authorization Server Database - SQL Injection",
                  "type": "Validate Inputs",
                  "subtype": "75 - Failure to Sanitize Special Elements into a Different Plane (Special Element Injection)",
                  "subCategorySummary": "The software does not adequately filter user-controlled input for special elements with control implications.",
                  "attackPattern": "66 - SQL Injection",
                  "attackPatternSummary": [
                    "This attack exploits target software that constructs SQL statements based on user input. An attacker crafts input strings so that when the target software constructs SQL statements based on the input, the resulting SQL statement performs actions other than those the application intended. SQL Injection results from failure of the application to appropriately validate input. When specially crafted user-controlled input consisting of SQL syntax is used without proper validation as part of SQL queries, it is possible to glean information from the database in ways not envisaged during application design. Depending upon the database and the design of the application, it may also be possible to leverage injection to have the database execute system-related commands of the attackers' choice. SQL Injection enables an attacker to talk directly to the database, thus bypassing the application completely. Successful injection can cause information disclosure as well as ability to add or modify data in the database. In order to successfully inject SQL and retrieve information from a database, an attacker:"
                  ],
                  "vulnerabilityRating": "8.1",
                  "description": "This threat is applicable if the authorization server stores refresh\ntokens as handles in a database. An attacker may obtain refresh\ntokens from the authorization server’s database by launching a SQL injection attack.\nImpact: Disclosure of all refresh tokens.",
                  "mitigation": "Countermeasures:\no Enforce credential storage protection best practices.\no Bind token to client id, if the attacker cannot obtain the\nrequired id and secret"
                },
                {
                  "status": "Open",
                  "severity": "High",
                  "deinitionSource": "other",
                  "title": "Refresh Token - Obtaining Refresh Token by Online Guessing",
                  "type": "An attacker may try to guess refresh token",
                  "attackPattern": "112 - Brute Force",
                  "attackPatternSummary": [
                    "In this attack, some asset (information, functionality, identity, etc.) is protected by a finite secret value. The attacker attempts to gain access to this asset by using trial-and-error to exhaustively explore all the possible secret values in the hope of finding the secret (or a value that is functionally equivalent) that will unlock the asset. Examples of secrets can include, but are not limited to, passwords, encryption keys, database lookup keys, and initial values to one-way functions. The key factor in this attack is the attackers' ability to explore the possible secret space rapidly. This, in turn, is a function of the size of the secret space and the computational power the attacker is able to bring to bear on the problem. If the attacker has modest resources and the secret space is large, the challenge facing the attacker is intractable. While the defender cannot control the resources available to an attacker, they can control the size of the secret space. Creating a large secret space involves selecting one's secret from as large a field of equally likely alternative secrets as possible and ensuring that an attacker is unable to reduce the size of this field using available clues or cryptanalysis. Doing this is more difficult than it sounds since elimination of patterns (which, in turn, would provide an attacker clues that would help them reduce the space of potential secrets) is difficult to do using deterministic machines, such as computers. Assuming a finite secret space, a brute force attack will eventually succeed. The defender must rely on making sure that the time and resources necessary to do so will exceed the value of the information. For example, a secret space that will likely take hundreds of years to explore is likely safe from raw-brute force attacks."
                  ],
                  "vulnerabilityRating": "8.1",
                  "description": "An attacker may try to guess valid refresh token values and send it\nusing the grant type \"refresh_token\" in order to obtain a valid\naccess token.\nImpact: Exposure of a single refresh token and derivable access\ntokens.",
                  "mitigation": "Countermeasures:\no Bind token to client id, because the attacker would guess the\nmatching client id, too.\no Authenticate the client; this adds another element that the\nattacker has to guess"
                },
                {
                  "status": "Open",
                  "severity": "High",
                  "deinitionSource": "owasp",
                  "title": "Resource Owner-s Password Grant: Obtaining User Passwords from Authorization Server Database",
                  "type": "OWASP Top Ten 2017 Category A5 - Broken Access Control",
                  "subtype": "285 - Improper Authorization",
                  "subCategorySummary": "The software does not perform or incorrectly performs an authorization check when an actor attempts to access a resource or perform an action.",
                  "attackPattern": "115 - Authentication Bypass",
                  "attackPatternSummary": [
                    "An attacker gains access to application, service, or device with the privileges of an authorized or privileged user by evading or circumventing an authentication mechanism. The attacker is therefore able to access protected data without authentication ever having taken place. This refers to an attacker gaining access equivalent to an authenticated user without ever going through an authentication procedure. This is usually the result of the attacker using an unexpected access procedure that does not go through the proper checkpoints where authentication should occur. For example, a web site might assume that all users will click through a given link in order to get to secure material and simply authenticate everyone that clicks the link. However, an attacker might be able to reach secured web content by explicitly entering the path to the content rather than clicking through the authentication link, thereby avoiding the check entirely. This attack pattern differs from other authentication attacks in that attacks of this pattern avoid authentication entirely, rather than faking authentication by exploiting flaws or by stealing credentials from legitimate users."
                  ],
                  "vulnerabilityRating": "8.9",
                  "description": "An attacker may obtain valid username/password combinations from the\nauthorization server’s database by gaining access to the database or\nlaunching a SQL injection attack.\nImpact: Disclosure of all username/password combinations. The impact\nmay exceed the domain of the authorization server, since many users\ntend to use the same credentials on different services.",
                  "mitigation": "Countermeasures:\no Enforce credential storage protection best practices"
                },
                {
                  "status": "Open",
                  "severity": "High",
                  "deinitionSource": "other",
                  "title": "Resource Owner-s Password Grant: Online Guessing",
                  "type": "Attacker guess valid username-password combinations",
                  "attackPattern": "112 - Brute Force",
                  "attackPatternSummary": [
                    "In this attack, some asset (information, functionality, identity, etc.) is protected by a finite secret value. The attacker attempts to gain access to this asset by using trial-and-error to exhaustively explore all the possible secret values in the hope of finding the secret (or a value that is functionally equivalent) that will unlock the asset. Examples of secrets can include, but are not limited to, passwords, encryption keys, database lookup keys, and initial values to one-way functions. The key factor in this attack is the attackers' ability to explore the possible secret space rapidly. This, in turn, is a function of the size of the secret space and the computational power the attacker is able to bring to bear on the problem. If the attacker has modest resources and the secret space is large, the challenge facing the attacker is intractable. While the defender cannot control the resources available to an attacker, they can control the size of the secret space. Creating a large secret space involves selecting one's secret from as large a field of equally likely alternative secrets as possible and ensuring that an attacker is unable to reduce the size of this field using available clues or cryptanalysis. Doing this is more difficult than it sounds since elimination of patterns (which, in turn, would provide an attacker clues that would help them reduce the space of potential secrets) is difficult to do using deterministic machines, such as computers. Assuming a finite secret space, a brute force attack will eventually succeed. The defender must rely on making sure that the time and resources necessary to do so will exceed the value of the information. For example, a secret space that will likely take hundreds of years to explore is likely safe from raw-brute force attacks."
                  ],
                  "vulnerabilityRating": "8.4",
                  "description": "An attacker may try to guess valid username/password combinations\nusing the grant type \"password\".\nImpact: Revelation of a single username/password combination.",
                  "mitigation": "Countermeasures:\no Utilize secure password policy (Section 5.1.4.2.1).\no Lock accounts\no Use tar pit\no Use CAPTCHAs\no Consider not using the grant type \"password\".\no Client authentication will provide another authentication factor and thus hinder the attack"
                }
              ],
              "attrs": {
                ".element-shape": {
                  "class": "element-shape hasOpenThreats isInScope"
                },
                "text": {
                  "text": "Authorization\nServer"
                },
                ".element-text": {
                  "class": "element-text hasOpenThreats isInScope"
                }
              }
            },
            {
              "type": "tm.Process",
              "size": {
                "width": 100,
                "height": 100
              },
              "position": {
                "x": 329,
                "y": 447
              },
              "angle": 0,
              "id": "5313bd4a-ca96-4c1e-ba41-4ee1316c502d",
              "z": 4,
              "hasOpenThreats": false,
              "attrs": {
                ".element-shape": {
                  "class": "element-shape hasNoOpenThreats isInScope"
                },
                "text": {
                  "text": "User Connector"
                },
                ".element-text": {
                  "class": "element-text hasNoOpenThreats isInScope"
                }
              }
            },
            {
              "type": "tm.Flow",
              "smooth": true,
              "source": {
                "id": "adbb6f55-4b48-4a36-87d1-7f68e4a7b915"
              },
              "target": {
                "id": "72e504d3-7374-4488-a70d-dfa20fc27edc"
              },
              "vertices": [
                {
                  "x": 293,
                  "y": 214
                }
              ],
              "id": "0bdb59de-ff73-4185-832a-072e90de3bd4",
              "labels": [
                {
                  "position": 0.5,
                  "attrs": {
                    "text": {
                      "text": "11. return token",
                      "font-weight": "400",
                      "font-size": "small"
                    }
                  }
                }
              ],
              "z": 5,
              "hasOpenThreats": true,
              "threats": [
                {
                  "status": "Open",
                  "severity": "High",
                  "deinitionSource": "cwe",
                  "title": "Token Endpoint - Eavesdropping Access Tokens",
                  "type": "Authorize Actors",
                  "subtype": "300 - Channel Accessible by Non-Endpoint ('Man-in-the-Middle')",
                  "subCategorySummary": "The product does not adequately verify the identity of actors at both ends of a communication channel, or does not adequately ensure the integrity of the channel, in a way that allows the channel to be accessed or influenced by an actor that is not an endpoint.",
                  "attackPattern": "158 - Sniffing Network Traffic",
                  "attackPatternSummary": [
                    "In this attack pattern, the adversary monitors network traffic between nodes of a public or multicast network in an attempt to capture sensitive information at the protocol level. Network sniffing applications can reveal TCP/IP, DNS, Ethernet, and other low-level network communication information. The adversary takes a passive role in this attack pattern and simply observes and analyzes the traffic. The adversary may precipitate or indirectly influence the content of the observed transaction, but is never the intended recipient of the target information."
                  ],
                  "vulnerabilityRating": "8.1",
                  "description": "Attackers may attempt to eavesdrop access tokens in transit from the\nauthorization server to the client.\nImpact: The attacker is able to access all resources with the\npermissions covered by the scope of the particular access token.",
                  "mitigation": "Countermeasures:\no As per the core OAuth spec, the authorization servers must ensure\nthat these transmissions are protected using transport-layer\nmechanisms such as TLS.\no If end-to-end confidentiality cannot be guaranteed, reducing scope and expiry time for access\ntokens can be used to reduce the damage in case of leaks."
                },
                {
                  "status": "Open",
                  "severity": "High",
                  "deinitionSource": "cwe",
                  "title": "Refresh Token -  Eavesdropping Refresh Tokens from Authorization Server",
                  "type": "Authorize Actors",
                  "subtype": "300 - Channel Accessible by Non-Endpoint ('Man-in-the-Middle')",
                  "subCategorySummary": "The product does not adequately verify the identity of actors at both ends of a communication channel, or does not adequately ensure the integrity of the channel, in a way that allows the channel to be accessed or influenced by an actor that is not an endpoint.",
                  "attackPattern": "651 - Eavesdropping",
                  "attackPatternSummary": [
                    "An adversary intercepts a form of communication (e.g. text, audio, video) by way of software (e.g., microphone and audio recording application), hardware (e.g., recording equipment), or physical means (e.g., physical proximity). The goal of eavesdropping is typically to gain unauthorized access to sensitive information about the target for financial, personal, political, or other gains. Eavesdropping is different from a sniffing attack as it does not take place on a network-based communication channel (e.g., IP traffic). Instead, it entails listening in on the raw audio source of a conversation between two or more parties."
                  ],
                  "vulnerabilityRating": "8.1",
                  "description": "An attacker may eavesdrop refresh tokens when they are transmitted\nfrom the authorization server to the client.",
                  "mitigation": "Countermeasures:\no As per the core OAuth spec, the authorization servers must ensure that these transmissions are protected using transport-layer mechanisms such as TLS.\no If end-to-end confidentiality cannot be guaranteed, reducing scope and expiry time for\nissued access tokens can be used to reduce the damage in case of leaks."
                }
              ],
              "attrs": {
                ".marker-target": {
                  "class": "marker-target hasOpenThreats isInScope"
                },
                ".connection": {
                  "class": "connection hasOpenThreats isInScope"
                }
              }
            },
            {
              "type": "tm.Flow",
              "smooth": true,
              "source": {
                "x": 425,
                "y": 471
              },
              "target": {
                "id": "5313bd4a-ca96-4c1e-ba41-4ee1316c502d"
              },
              "vertices": [
                {
                  "x": 532,
                  "y": 479
                },
                {
                  "x": 523,
                  "y": 523
                }
              ],
              "id": "76d8a219-caed-46f8-8f56-fc105a79dd93",
              "labels": [
                {
                  "position": 0.5,
                  "attrs": {
                    "text": {
                      "text": "6. validate login\ninformation",
                      "font-weight": "400",
                      "font-size": "small"
                    }
                  }
                }
              ],
              "z": 6,
              "hasOpenThreats": false,
              "attrs": {
                ".marker-target": {
                  "class": "marker-target hasNoOpenThreats isInScope"
                },
                ".connection": {
                  "class": "connection hasNoOpenThreats isInScope"
                }
              }
            },
            {
              "type": "tm.Flow",
              "smooth": true,
              "source": {
                "id": "adbb6f55-4b48-4a36-87d1-7f68e4a7b915"
              },
              "target": {
                "id": "5313bd4a-ca96-4c1e-ba41-4ee1316c502d"
              },
              "vertices": [
                {
                  "x": 481,
                  "y": 397
                }
              ],
              "id": "eb732e22-8573-460f-af1b-7d1ac5bb3c65",
              "labels": [
                {
                  "position": 0.5,
                  "attrs": {
                    "text": {
                      "text": "5. send login\ninformation",
                      "font-weight": "400",
                      "font-size": "small"
                    }
                  }
                }
              ],
              "z": 7,
              "hasOpenThreats": false,
              "attrs": {
                ".marker-target": {
                  "class": "marker-target hasNoOpenThreats isInScope"
                },
                ".connection": {
                  "class": "connection hasNoOpenThreats isInScope"
                }
              }
            },
            {
              "type": "tm.Flow",
              "smooth": true,
              "source": {
                "id": "5313bd4a-ca96-4c1e-ba41-4ee1316c502d"
              },
              "target": {
                "id": "adbb6f55-4b48-4a36-87d1-7f68e4a7b915"
              },
              "vertices": [
                {
                  "x": 413,
                  "y": 337
                }
              ],
              "id": "508b812c-8f8c-4dbe-9fc5-22ad65b57e74",
              "labels": [
                {
                  "position": 0.5,
                  "attrs": {
                    "text": {
                      "text": "7. return login result",
                      "font-weight": "400",
                      "font-size": "small"
                    }
                  }
                }
              ],
              "z": 8,
              "hasOpenThreats": false,
              "attrs": {
                ".marker-target": {
                  "class": "marker-target hasNoOpenThreats isInScope"
                },
                ".connection": {
                  "class": "connection hasNoOpenThreats isInScope"
                }
              }
            },
            {
              "type": "tm.Flow",
              "smooth": true,
              "source": {
                "id": "5313bd4a-ca96-4c1e-ba41-4ee1316c502d"
              },
              "target": {
                "id": "72e504d3-7374-4488-a70d-dfa20fc27edc"
              },
              "vertices": [
                {
                  "x": 237,
                  "y": 369
                }
              ],
              "id": "cd6890ff-ce4b-4746-8965-490e57fc2006",
              "labels": [
                {
                  "position": 0.5,
                  "attrs": {
                    "text": {
                      "text": "3. return result of logi\nn screen information",
                      "font-weight": "400",
                      "font-size": "small"
                    }
                  }
                }
              ],
              "z": 9,
              "hasOpenThreats": false,
              "attrs": {
                ".marker-target": {
                  "class": "marker-target hasNoOpenThreats isInScope"
                },
                ".connection": {
                  "class": "connection hasNoOpenThreats isInScope"
                }
              }
            },
            {
              "type": "tm.Flow",
              "smooth": true,
              "source": {
                "id": "72e504d3-7374-4488-a70d-dfa20fc27edc"
              },
              "target": {
                "id": "5313bd4a-ca96-4c1e-ba41-4ee1316c502d"
              },
              "vertices": [
                {
                  "x": 210,
                  "y": 419
                }
              ],
              "id": "77d0ceb3-162e-4f8d-ac50-9484d60a9a39",
              "labels": [
                {
                  "position": 0.5,
                  "attrs": {
                    "text": {
                      "text": "2. send login screen\ninformation",
                      "font-weight": "400",
                      "font-size": "small"
                    }
                  }
                }
              ],
              "z": 11,
              "hasOpenThreats": false,
              "attrs": {
                ".marker-target": {
                  "class": "marker-target hasNoOpenThreats isInScope"
                },
                ".connection": {
                  "class": "connection hasNoOpenThreats isInScope"
                }
              }
            },
            {
              "type": "tm.Flow",
              "smooth": true,
              "source": {
                "id": "597e98f1-00e2-478c-9aac-bce10d4e061a"
              },
              "target": {
                "id": "72e504d3-7374-4488-a70d-dfa20fc27edc"
              },
              "vertices": [],
              "id": "e2f8309b-8ab2-4990-9cd9-b117baecca0c",
              "labels": [
                {
                  "position": {
                    "distance": 0.5404738189041783,
                    "offset": 6.244819242041558
                  },
                  "attrs": {
                    "text": {
                      "text": "1. enter information",
                      "font-weight": "400",
                      "font-size": "small"
                    }
                  }
                }
              ],
              "z": 12,
              "hasOpenThreats": false,
              "attrs": {
                ".marker-target": {
                  "class": "marker-target hasNoOpenThreats isInScope"
                },
                ".connection": {
                  "class": "connection hasNoOpenThreats isInScope"
                }
              }
            },
            {
              "type": "tm.Flow",
              "smooth": true,
              "source": {
                "id": "72e504d3-7374-4488-a70d-dfa20fc27edc"
              },
              "target": {
                "id": "adbb6f55-4b48-4a36-87d1-7f68e4a7b915"
              },
              "vertices": [
                {
                  "x": 331,
                  "y": 283
                }
              ],
              "id": "716fe9dd-12e3-4e87-9bc1-322bdfaa2aa2",
              "labels": [
                {
                  "position": 0.5,
                  "attrs": {
                    "text": {
                      "text": "4. send oauth2\npasswordflowrequest",
                      "font-weight": "400",
                      "font-size": "small"
                    }
                  }
                }
              ],
              "z": 13,
              "hasOpenThreats": true,
              "threats": [
                {
                  "status": "Open",
                  "severity": "High",
                  "deinitionSource": "allcwe",
                  "title": "Authorization Endpoint - Password Phishing by Counterfeit Authorization Server",
                  "type": "All",
                  "subtype": "601 - URL Redirection to Untrusted Site ('Open Redirect')",
                  "subCategorySummary": "A web application accepts a user-controlled input that specifies a link to an external site, and uses that link in a Redirect. This simplifies phishing attacks.",
                  "attackPattern": "98 - Phishing",
                  "attackPatternSummary": [
                    "Phishing is a social engineering technique where an attacker masquerades as a legitimate entity with which the victim might do business in order to prompt the user to reveal some confidential information (very frequently authentication credentials) that can later be used by an attacker. Phishing is essentially a form of information gathering or \"fishing\" for information."
                  ],
                  "vulnerabilityRating": "8.6",
                  "description": "OAuth makes no attempt to verify the authenticity of the\nauthorization server. A hostile party could take advantage of this\nby intercepting the client’s requests and returning misleading or\notherwise incorrect responses. This could be achieved using DNS or\nAddress Resolution Protocol (ARP) spoofing. Wide deployment of OAuth\nand similar protocols may cause users to become inured to the\npractice of being redirected to web sites where they are asked to\nenter their passwords. If users are not careful to verify the\nauthenticity of these web sites before entering their credentials, it\nwill be possible for attackers to exploit this practice to steal\nusers’ passwords.",
                  "mitigation": "Countermeasures:\no Authorization servers should consider such attacks when developing\nservices based on OAuth and should require the use of transportlayer\nsecurity for any requests where the authenticity of the\nauthorization server or of request responses is an issue.\no Authorization servers should attempt to educate users about the\nrisks posed by phishing attacks and should provide mechanisms that\nmake it easy for users to confirm the authenticity of their sites."
                },
                {
                  "status": "Open",
                  "severity": "High",
                  "deinitionSource": "cwe",
                  "title": "Token Endpoint - Disclosure of Client Credentials during Transmission",
                  "type": "Authorize Actors",
                  "subtype": "300 - Channel Accessible by Non-Endpoint ('Man-in-the-Middle')",
                  "subCategorySummary": "The product does not adequately verify the identity of actors at both ends of a communication channel, or does not adequately ensure the integrity of the channel, in a way that allows the channel to be accessed or influenced by an actor that is not an endpoint.",
                  "attackPattern": "158 - Sniffing Network Traffic",
                  "attackPatternSummary": [
                    "In this attack pattern, the adversary monitors network traffic between nodes of a public or multicast network in an attempt to capture sensitive information at the protocol level. Network sniffing applications can reveal TCP/IP, DNS, Ethernet, and other low-level network communication information. The adversary takes a passive role in this attack pattern and simply observes and analyzes the traffic. The adversary may precipitate or indirectly influence the content of the observed transaction, but is never the intended recipient of the target information."
                  ],
                  "vulnerabilityRating": "8.1",
                  "description": "An attacker could attempt to eavesdrop the transmission of client\ncredentials between the client and server during the client\nauthentication process or during OAuth token requests.\nImpact: Revelation of a client credential enabling phishing or\nimpersonation of a client service.",
                  "mitigation": "Countermeasures:\no The transmission of client credentials must be protected using\ntransport-layer mechanisms such as TLS.\no Use alternative authentication means that do not require the\nsending of plaintext credentials over the wire (e.g., Hash-based\nMessage Authentication Code)."
                },
                {
                  "status": "Open",
                  "severity": "High",
                  "deinitionSource": "cwe",
                  "title": "Refresh Token - Refresh Token Phishing by Counterfeit Authorization Server",
                  "type": "Validate Inputs",
                  "subtype": "601 - URL Redirection to Untrusted Site ('Open Redirect')",
                  "subCategorySummary": "A web application accepts a user-controlled input that specifies a link to an external site, and uses that link in a Redirect. This simplifies phishing attacks.",
                  "attackPattern": "98 - Phishing",
                  "attackPatternSummary": [
                    "Phishing is a social engineering technique where an attacker masquerades as a legitimate entity with which the victim might do business in order to prompt the user to reveal some confidential information (very frequently authentication credentials) that can later be used by an attacker. Phishing is essentially a form of information gathering or \"fishing\" for information."
                  ],
                  "description": "An attacker could try to obtain valid refresh tokens by proxying\nrequests to the authorization server. Given the assumption that the\nauthorization server URL is well-known at development time or can at\nleast be obtained from a well-known resource server, the attacker\nmust utilize some kind of spoofing in order to succeed.",
                  "mitigation": "Countermeasures:\no Utilize server authentication",
                  "vulnerabilityRating": "8.2"
                },
                {
                  "status": "Open",
                  "severity": "High",
                  "deinitionSource": "cwe",
                  "title": "Resource Owner-s Password Grant: Obtaining User Passwords on Transport",
                  "type": "Authorize Actors",
                  "subtype": "300 - Channel Accessible by Non-Endpoint ('Man-in-the-Middle')",
                  "subCategorySummary": "The product does not adequately verify the identity of actors at both ends of a communication channel, or does not adequately ensure the integrity of the channel, in a way that allows the channel to be accessed or influenced by an actor that is not an endpoint.",
                  "attackPattern": "651 - Eavesdropping",
                  "attackPatternSummary": [
                    "An adversary intercepts a form of communication (e.g. text, audio, video) by way of software (e.g., microphone and audio recording application), hardware (e.g., recording equipment), or physical means (e.g., physical proximity). The goal of eavesdropping is typically to gain unauthorized access to sensitive information about the target for financial, personal, political, or other gains. Eavesdropping is different from a sniffing attack as it does not take place on a network-based communication channel (e.g., IP traffic). Instead, it entails listening in on the raw audio source of a conversation between two or more parties."
                  ],
                  "description": "An attacker could attempt to eavesdrop the transmission of end-user\ncredentials with the grant type \"password\" between the client and\nserver.\nImpact: Disclosure of a single end-user’s password.",
                  "mitigation": "Countermeasures:\no Ensure confidentiality of requests\no Use alternative authentication means that do not require the\nsending of plaintext credentials over the wire (e.g., Hash-based\nMessage Authentication Code).",
                  "vulnerabilityRating": "8.6"
                }
              ],
              "attrs": {
                ".marker-target": {
                  "class": "marker-target hasOpenThreats isInScope"
                },
                ".connection": {
                  "class": "connection hasOpenThreats isInScope"
                }
              }
            },
            {
              "type": "tm.Flow",
              "smooth": true,
              "source": {
                "id": "adbb6f55-4b48-4a36-87d1-7f68e4a7b915"
              },
              "target": {
                "id": "adbb6f55-4b48-4a36-87d1-7f68e4a7b915"
              },
              "vertices": [
                {
                  "x": 685,
                  "y": 141
                },
                {
                  "x": 638,
                  "y": 90
                }
              ],
              "id": "7c129ce8-459a-448f-ab18-8cc92a14f9be",
              "labels": [
                {
                  "position": 0.5,
                  "attrs": {
                    "text": {
                      "text": "8. generate token",
                      "font-weight": "400",
                      "font-size": "small"
                    }
                  }
                }
              ],
              "z": 14,
              "hasOpenThreats": false,
              "attrs": {
                ".marker-target": {
                  "class": "marker-target hasNoOpenThreats isInScope"
                },
                ".connection": {
                  "class": "connection hasNoOpenThreats isInScope"
                }
              }
            },
            {
              "type": "tm.Process",
              "size": {
                "width": 100,
                "height": 100
              },
              "position": {
                "x": 639,
                "y": 329
              },
              "angle": 0,
              "id": "e7130819-d883-48be-954b-10c66b6ad08b",
              "z": 15,
              "hasOpenThreats": true,
              "threats": [
                {
                  "status": "Open",
                  "severity": "High",
                  "deinitionSource": "allcwe",
                  "title": "Protected Resources - Replay of Authorized Resource Server Requests",
                  "type": "All",
                  "subtype": "294 - Authentication Bypass by Capture-replay",
                  "subCategorySummary": "A capture-replay flaw exists when the design of the software makes it possible for a malicious user to sniff network traffic and bypass authentication by replaying it to the server in question to the same effect as the original message (or with minor changes).",
                  "attackPattern": "158 - Sniffing Network Traffic",
                  "attackPatternSummary": [
                    "In this attack pattern, the adversary monitors network traffic between nodes of a public or multicast network in an attempt to capture sensitive information at the protocol level. Network sniffing applications can reveal TCP/IP, DNS, Ethernet, and other low-level network communication information. The adversary takes a passive role in this attack pattern and simply observes and analyzes the traffic. The adversary may precipitate or indirectly influence the content of the observed transaction, but is never the intended recipient of the target information."
                  ],
                  "vulnerabilityRating": "8.2",
                  "description": "An attacker could attempt to replay valid requests in order to obtain\nor to modify/destroy user data.",
                  "mitigation": "Countermeasures:\no The resource server should utilize transport security measures\n(e.g., TLS) in order to prevent such attacks.\nThis would prevent the attacker from capturing valid requests.\no Alternatively, the resource server could employ signed requests  along with nonces and timestamps in order to\nuniquely identify requests. The resource server should detect and\nrefuse every replayed request."
                },
                {
                  "status": "Open",
                  "severity": "High",
                  "deinitionSource": "other",
                  "title": "Protected Resources - Guessing Access Tokens",
                  "type": "Guess handle token based on prior knowledge",
                  "vulnerabilityRating": "8.5",
                  "description": "Where the token is a handle, the attacker may attempt to guess the\naccess token values based on knowledge they have from other access\ntokens.\nImpact: Access to a single user’s detail",
                  "mitigation": "Countermeasures:\no Handle tokens should have a reasonable level of entropy in order to make guessing a valid token value not feasible.\no Assertion (or self-contained token) token contents should be\nprotected by a digital signature.\no Security can be further strengthened by using a short access token\nduration"
                },
                {
                  "status": "Open",
                  "severity": "Medium",
                  "deinitionSource": "other",
                  "title": "Protected Resources - Abuse of Token by Legitimate Resource Server or Client",
                  "type": "Abuse of Token by Legitimate Party",
                  "vulnerabilityRating": "6.6",
                  "description": "A legitimate resource server could attempt to use an access token to\naccess another resource server. Similarly, a client could try to use\na token obtained for one server on another resource server.",
                  "mitigation": "Countermeasures:\no Tokens should be restricted to particular resource servers"
                },
                {
                  "status": "Open",
                  "severity": "High",
                  "deinitionSource": "cwe",
                  "title": "Protected Resources - Token Leakage via Log Files and HTTP Referrers",
                  "type": "Audit",
                  "subtype": "532 - Information Exposure Through Log Files",
                  "subCategorySummary": "Information written to log files can be of a sensitive nature and give valuable guidance to an attacker or expose sensitive user information.",
                  "vulnerabilityRating": "8.7",
                  "description": "If access tokens are sent via URI query parameters, such tokens may\nleak to log files and the HTTP \"referer\".",
                  "mitigation": "Countermeasures:\no Use Authorization headers or POST parameters instead of URI request parameters.\no Set logging configuration appropriately.\no Prevent unauthorized persons from access to system log files.\no Abuse of leaked access tokens can be prevented by enforcing\nauthenticated requests.\no The impact of token leakage may be reduced by limiting scope and duration and by enforcing one-time token usage"
                }
              ],
              "attrs": {
                ".element-shape": {
                  "class": "element-shape hasOpenThreats isInScope"
                },
                "text": {
                  "text": "Resource\nServer"
                },
                ".element-text": {
                  "class": "element-text hasOpenThreats isInScope"
                }
              }
            },
            {
              "type": "tm.Flow",
              "smooth": true,
              "source": {
                "id": "adbb6f55-4b48-4a36-87d1-7f68e4a7b915"
              },
              "target": {
                "id": "e7130819-d883-48be-954b-10c66b6ad08b"
              },
              "vertices": [
                {
                  "x": 648,
                  "y": 269
                }
              ],
              "id": "c3ee134b-cc6e-46be-a03b-12349e7d0dbb",
              "labels": [
                {
                  "position": 0.5,
                  "attrs": {
                    "text": {
                      "text": "9. call token\nenhancement",
                      "font-weight": "400",
                      "font-size": "small"
                    }
                  }
                }
              ],
              "z": 16,
              "hasOpenThreats": false,
              "attrs": {
                ".marker-target": {
                  "class": "marker-target hasNoOpenThreats isInScope"
                },
                ".connection": {
                  "class": "connection hasNoOpenThreats isInScope"
                }
              }
            },
            {
              "type": "tm.Flow",
              "smooth": true,
              "source": {
                "id": "e7130819-d883-48be-954b-10c66b6ad08b"
              },
              "target": {
                "id": "adbb6f55-4b48-4a36-87d1-7f68e4a7b915"
              },
              "vertices": [
                {
                  "x": 587,
                  "y": 301
                }
              ],
              "id": "e2442a8d-4fef-4d87-a390-b815b386737f",
              "labels": [
                {
                  "position": 0.5,
                  "attrs": {
                    "text": {
                      "text": "10. enhancement\nresponse",
                      "font-weight": "400",
                      "font-size": "small"
                    }
                  }
                }
              ],
              "z": 17,
              "hasOpenThreats": false,
              "attrs": {
                ".marker-target": {
                  "class": "marker-target hasNoOpenThreats isInScope"
                },
                ".connection": {
                  "class": "connection hasNoOpenThreats isInScope"
                }
              }
            },
            {
              "type": "tm.Flow",
              "smooth": true,
              "source": {
                "id": "72e504d3-7374-4488-a70d-dfa20fc27edc"
              },
              "target": {
                "id": "e7130819-d883-48be-954b-10c66b6ad08b"
              },
              "vertices": [
                {
                  "x": 264,
                  "y": 556
                },
                {
                  "x": 522,
                  "y": 561
                }
              ],
              "id": "1e4e0b0f-b05a-4b68-8a8e-702bad02bc14",
              "labels": [
                {
                  "position": 0.5,
                  "attrs": {
                    "text": {
                      "text": "12. validate token",
                      "font-weight": "400",
                      "font-size": "small"
                    }
                  }
                }
              ],
              "z": 19,
              "hasOpenThreats": true,
              "threats": [
                {
                  "status": "Open",
                  "severity": "High",
                  "deinitionSource": "cwe",
                  "title": "Protected Resources - Eavesdropping Access Tokens on Transport",
                  "type": "Authorize Actors",
                  "subtype": "300 - Channel Accessible by Non-Endpoint ('Man-in-the-Middle')",
                  "subCategorySummary": "The product does not adequately verify the identity of actors at both ends of a communication channel, or does not adequately ensure the integrity of the channel, in a way that allows the channel to be accessed or influenced by an actor that is not an endpoint.",
                  "attackPattern": "651 - Eavesdropping",
                  "attackPatternSummary": [
                    "An adversary intercepts a form of communication (e.g. text, audio, video) by way of software (e.g., microphone and audio recording application), hardware (e.g., recording equipment), or physical means (e.g., physical proximity). The goal of eavesdropping is typically to gain unauthorized access to sensitive information about the target for financial, personal, political, or other gains. Eavesdropping is different from a sniffing attack as it does not take place on a network-based communication channel (e.g., IP traffic). Instead, it entails listening in on the raw audio source of a conversation between two or more parties."
                  ],
                  "vulnerabilityRating": "8.5",
                  "description": "An attacker could try to obtain a valid access token on transport between the client and resource server. As access tokens are shared secrets between the authorization server and resource server, they should be treated with the same care as other credentials (e.g., end user passwords)",
                  "mitigation": "Countermeasures:\no Access tokens sent as bearer tokens should not be sent in the\nclear over an insecure channel. As per the core OAuth spec,\ntransmission of access tokens must be protected using transportlayer\nmechanisms such as TLS.\no A short lifetime reduces impact in case tokens are compromised.\no The access token can be bound to a client’s identifier and require\nthe client to prove legitimate ownership of the token to the\nresource server"
                },
                {
                  "status": "Open",
                  "severity": "High",
                  "deinitionSource": "allcwe",
                  "title": "Protected Resources - Access Token Phishing by Counterfeit Resource Server",
                  "type": "All",
                  "subtype": "601 - URL Redirection to Untrusted Site ('Open Redirect')",
                  "subCategorySummary": "A web application accepts a user-controlled input that specifies a link to an external site, and uses that link in a Redirect. This simplifies phishing attacks.",
                  "attackPattern": "98 - Phishing",
                  "attackPatternSummary": [
                    "Phishing is a social engineering technique where an attacker masquerades as a legitimate entity with which the victim might do business in order to prompt the user to reveal some confidential information (very frequently authentication credentials) that can later be used by an attacker. Phishing is essentially a form of information gathering or \"fishing\" for information."
                  ],
                  "vulnerabilityRating": "8.5",
                  "description": "An attacker may pretend to be a particular resource server and to\naccept tokens from a particular authorization server. If the client\nsends a valid access token to this counterfeit resource server, the\nserver in turn may use that token to access other services on behalf\nof the resource owner.",
                  "mitigation": "Countermeasures:\no Clients should not make authenticated requests with an access\ntoken to unfamiliar resource servers, regardless of the presence\nof a secure channel. If the resource server URL is well-known to\nthe client, it may authenticate the resource servers.\no Associate the endpoint URL of the resource server the client\ntalked to with the access token (e.g., in an audience field) and\nvalidate the association at a legitimate resource server. The\nendpoint URL validation policy may be strict (exact match) or more\nrelaxed (e.g., same host). This would require telling the\nauthorization server about the resource server endpoint URL in the\nauthorization process.\no Associate an access token with a client and authenticate the\nclient with resource server requests (typically via a signature,\nin order to not disclose a secret to a potential attacker). This\nprevents the attack because the counterfeit server is assumed to\nlack the capability to correctly authenticate on behalf of the\nlegitimate client to the resource server.\no Restrict the token scope and/or limit the token to a certain resource server"
                }
              ],
              "attrs": {
                ".marker-target": {
                  "class": "marker-target hasOpenThreats isInScope"
                },
                ".connection": {
                  "class": "connection hasOpenThreats isInScope"
                }
              }
            }
          ]
        },
        "size": {
          "height": 685,
          "width": 1092
        }
      }
    ],
    "reviewer": "Anirban"
  }
}